import { test, expect } from '@playwright/test';

/**
 * Genesis 11-15Ïû• ÏóÖÎç∞Ïù¥Ìä∏ Í≤ÄÏ¶ù ÌÖåÏä§Ìä∏
 *
 * Î™©Ï†Å:
 * - 11-15Ïû•Ïùò Î™®Îì† Íµ¨Ï†àÏù¥ Ïò¨Î∞îÎ•¥Í≤å Î†åÎçîÎßÅÎêòÎäîÏßÄ ÌôïÏù∏
 * - ÌûàÎ∏åÎ¶¨Ïñ¥ ÌÖçÏä§Ìä∏, Îã®Ïñ¥Ïû•, Ï£ºÏÑùÏù¥ Ï†ïÏÉÅ ÌëúÏãúÎêòÎäîÏßÄ ÌôïÏù∏
 * - SVG ÏïÑÏù¥ÏΩòÏù¥ Î†åÎçîÎßÅÎêòÎäîÏßÄ ÌôïÏù∏
 * - ÌÉ≠ Ï†ÑÌôò Î∞è ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò ÎèôÏûë ÌôïÏù∏
 */

test.describe('Genesis 11-15Ïû• ÏóÖÎç∞Ïù¥Ìä∏ Í≤ÄÏ¶ù', () => {
  const BASE_URL = 'http://localhost:5174';

  test.beforeEach(async ({ page }) => {
    await page.goto(BASE_URL);
    await page.waitForLoadState('networkidle');
  });

  // Í∞Å Ïû•Ïùò Ï≤´ Î≤àÏß∏ Íµ¨Ï†àÏùÑ ÌÖåÏä§Ìä∏
  const chaptersToTest = [
    { chapter: 11, verse: 10, verseId: 'genesis_11_10' },
    { chapter: 12, verse: 11, verseId: 'genesis_12_11' },
    { chapter: 13, verse: 5, verseId: 'genesis_13_5' },
    { chapter: 14, verse: 10, verseId: 'genesis_14_10' },
    { chapter: 15, verse: 1, verseId: 'genesis_15_1' },
  ];

  test('11-15Ïû• Î™®Îì† Ï±ïÌÑ∞ Ï†ëÍ∑º Í∞ÄÎä• ÌôïÏù∏', async ({ page }) => {
    console.log('\nüìñ 11-15Ïû• Ï±ïÌÑ∞ Ï†ëÍ∑ºÏÑ± ÌÖåÏä§Ìä∏...\n');

    for (const { chapter, verse } of chaptersToTest) {
      // Î∂Å ÏÑ†ÌÉù Î≤ÑÌäº ÌÅ¥Î¶≠
      await page.evaluate(() => window.scrollTo({ top: 0, behavior: 'instant' }));
      await page.waitForTimeout(300);

      await page.click('button:has-text("Ï∞ΩÏÑ∏Í∏∞"):has-text("Ïû•")');
      await page.waitForSelector('text=ÏÑ±Í≤Ω ÏÑ†ÌÉù', { timeout: 5000 });

      // Ï∞ΩÏÑ∏Í∏∞ ÏÑ†ÌÉù
      const genesisButton = page.locator('.grid button').filter({ hasText: 'Ï∞ΩÏÑ∏Í∏∞' }).first();
      await genesisButton.scrollIntoViewIfNeeded();
      await genesisButton.click({ force: true });
      await page.waitForSelector('text=Ï∞ΩÏÑ∏Í∏∞ (50Ïû•)', { timeout: 5000 });

      // Ï±ïÌÑ∞ ÏÑ†ÌÉù
      await page.click(`button[id="chapter-${chapter}"]`);
      await page.waitForSelector('text=ÏÑ±Í≤Ω ÏÑ†ÌÉù', { state: 'hidden', timeout: 5000 });

      // Íµ¨Ï†à Ï∞∏Ï°∞ ÌôïÏù∏
      await page.waitForSelector(`text=Genesis ${chapter}:${verse}`, { timeout: 10000 });

      console.log(`   ‚úÖ Chapter ${chapter}: Ï†ëÍ∑º ÏÑ±Í≥µ`);
    }
  });

  test('11-15Ïû• ÌûàÎ∏åÎ¶¨Ïñ¥ ÌÖçÏä§Ìä∏ Î†åÎçîÎßÅ ÌôïÏù∏', async ({ page }) => {
    console.log('\nüìñ ÌûàÎ∏åÎ¶¨Ïñ¥ ÌÖçÏä§Ìä∏ Î†åÎçîÎßÅ ÌÖåÏä§Ìä∏...\n');

    for (const { chapter, verse } of chaptersToTest) {
      // Ï±ïÌÑ∞Î°ú Ïù¥Îèô
      await page.evaluate(() => window.scrollTo({ top: 0, behavior: 'instant' }));
      await page.waitForTimeout(300);
      await page.click('button:has-text("Ï∞ΩÏÑ∏Í∏∞"):has-text("Ïû•")');
      await page.waitForSelector('text=ÏÑ±Í≤Ω ÏÑ†ÌÉù', { timeout: 5000 });
      const genesisButton = page.locator('.grid button').filter({ hasText: 'Ï∞ΩÏÑ∏Í∏∞' }).first();
      await genesisButton.scrollIntoViewIfNeeded();
      await genesisButton.click({ force: true });
      await page.waitForSelector('text=Ï∞ΩÏÑ∏Í∏∞ (50Ïû•)', { timeout: 5000 });
      await page.click(`button[id="chapter-${chapter}"]`);
      await page.waitForSelector('text=ÏÑ±Í≤Ω ÏÑ†ÌÉù', { state: 'hidden', timeout: 5000 });
      await page.waitForSelector(`text=Genesis ${chapter}:${verse}`, { timeout: 10000 });

      // ÌûàÎ∏åÎ¶¨Ïñ¥ ÌÖçÏä§Ìä∏ ÌôïÏù∏
      const hebrewText = await page.locator('[dir="rtl"]').first().textContent();
      expect(hebrewText).toBeTruthy();
      expect(hebrewText!.length).toBeGreaterThan(0);

      // ÌïúÍµ≠Ïñ¥ Î∞úÏùå ÌôïÏù∏
      const koreanPronunciation = page.locator('text=üó£Ô∏è ÌïúÍµ≠Ïñ¥ Î∞úÏùå').locator('..').locator('p');
      await expect(koreanPronunciation).toBeVisible();

      // ÌòÑÎåÄÏñ¥ ÏùòÏó≠ ÌôïÏù∏
      const modernText = page.locator('text=‚ú® ÌòÑÎåÄÏñ¥ ÏùòÏó≠').locator('..').locator('p');
      await expect(modernText).toBeVisible();

      const modernContent = await modernText.textContent();
      expect(modernContent).toBeTruthy();
      expect(modernContent).not.toContain('[TODO');

      console.log(`   ‚úÖ Chapter ${chapter}:${verse} - ÌûàÎ∏åÎ¶¨Ïñ¥ & ÌïúÍµ≠Ïñ¥ Î†åÎçîÎßÅ ÏÑ±Í≥µ`);
    }
  });

  test('11-15Ïû• Îã®Ïñ¥Ïû• ÌÉ≠ ÌôïÏù∏', async ({ page }) => {
    console.log('\nüìö Îã®Ïñ¥Ïû• ÌÉ≠ ÌÖåÏä§Ìä∏...\n');

    // Genesis 15:1Î°ú Ïù¥Îèô (ÏùòÎØ∏ ÏûàÎäî Îã®Ïñ¥Îì§Ïù¥ ÎßéÏùÄ Íµ¨Ï†à)
    await page.evaluate(() => window.scrollTo({ top: 0, behavior: 'instant' }));
    await page.waitForTimeout(300);
    await page.click('button:has-text("Ï∞ΩÏÑ∏Í∏∞"):has-text("Ïû•")');
    await page.waitForSelector('text=ÏÑ±Í≤Ω ÏÑ†ÌÉù', { timeout: 5000 });
    const genesisButton = page.locator('.grid button').filter({ hasText: 'Ï∞ΩÏÑ∏Í∏∞' }).first();
    await genesisButton.scrollIntoViewIfNeeded();
    await genesisButton.click({ force: true });
    await page.waitForSelector('text=Ï∞ΩÏÑ∏Í∏∞ (50Ïû•)', { timeout: 5000 });
    await page.click('button[id="chapter-15"]');
    await page.waitForSelector('text=ÏÑ±Í≤Ω ÏÑ†ÌÉù', { state: 'hidden', timeout: 5000 });
    await page.waitForSelector('text=Genesis 15:1', { timeout: 10000 });

    // Îã®Ïñ¥Ïû• ÌÉ≠ ÌÅ¥Î¶≠
    await page.click('button:has-text("Îã®Ïñ¥Ïû•")');
    await page.waitForTimeout(500);

    // Îã®Ïñ¥ Ïπ¥Îìú ÌôïÏù∏
    const wordCards = page.locator('[class*="cursor-pointer"]').filter({ hasText: /^[◊ê-◊™]/ });
    const wordCount = await wordCards.count();
    expect(wordCount).toBeGreaterThan(0);

    console.log(`   ‚úÖ Îã®Ïñ¥Ïû•: ${wordCount}Í∞ú Îã®Ïñ¥ Ïπ¥Îìú ÌôïÏù∏`);

    // Ï≤´ Î≤àÏß∏ Îã®Ïñ¥ Ïπ¥Îìú ÌÅ¥Î¶≠ÌïòÏó¨ Îí∑Î©¥ ÌôïÏù∏
    if (wordCount > 0) {
      await wordCards.first().click();
      await page.waitForTimeout(500);

      // Îí∑Î©¥Ïóê ÏùòÎØ∏, Î∞úÏùå, Î¨∏Î≤ï Ï†ïÎ≥¥Í∞Ä ÏûàÎäîÏßÄ ÌôïÏù∏
      const cardContent = await page.locator('[class*="perspective"]').first().textContent();
      expect(cardContent).toBeTruthy();

      console.log('   ‚úÖ ÌîåÎûòÏãúÏπ¥Îìú Îí∑Î©¥ Î†åÎçîÎßÅ ÌôïÏù∏');
    }
  });

  test('11-15Ïû• ÍπäÏù¥ÏùΩÍ∏∞ ÌÉ≠ ÌôïÏù∏', async ({ page }) => {
    console.log('\nüìñ ÍπäÏù¥ÏùΩÍ∏∞ ÌÉ≠ ÌÖåÏä§Ìä∏...\n');

    // Genesis 12:11Î°ú Ïù¥Îèô (Ï£ºÏÑùÏù¥ ÌíçÎ∂ÄÌïú Íµ¨Ï†à)
    await page.evaluate(() => window.scrollTo({ top: 0, behavior: 'instant' }));
    await page.waitForTimeout(300);
    await page.click('button:has-text("Ï∞ΩÏÑ∏Í∏∞"):has-text("Ïû•")');
    await page.waitForSelector('text=ÏÑ±Í≤Ω ÏÑ†ÌÉù', { timeout: 5000 });
    const genesisButton = page.locator('.grid button').filter({ hasText: 'Ï∞ΩÏÑ∏Í∏∞' }).first();
    await genesisButton.scrollIntoViewIfNeeded();
    await genesisButton.click({ force: true });
    await page.waitForSelector('text=Ï∞ΩÏÑ∏Í∏∞ (50Ïû•)', { timeout: 5000 });
    await page.click('button[id="chapter-12"]');
    await page.waitForSelector('text=ÏÑ±Í≤Ω ÏÑ†ÌÉù', { state: 'hidden', timeout: 5000 });
    await page.waitForSelector('text=Genesis 12:', { timeout: 10000 });

    // ÍπäÏù¥ÏùΩÍ∏∞ ÌÉ≠ ÌÅ¥Î¶≠
    await page.click('button:has-text("ÍπäÏù¥ÏùΩÍ∏∞")');
    await page.waitForTimeout(500);

    // Ï£ºÏÑù intro ÌôïÏù∏
    const commentaryIntro = page.locator('text=Ï∞ΩÏÑ∏Í∏∞ 12Ïû•').first();
    await expect(commentaryIntro).toBeVisible();

    // ÏÑπÏÖò Ïπ¥Îìú ÌôïÏù∏ (ÏµúÏÜå 1Í∞ú Ïù¥ÏÉÅ)
    const sectionCards = page.locator('text=/1Ô∏è‚É£|2Ô∏è‚É£|3Ô∏è‚É£/');
    const sectionCount = await sectionCards.count();
    expect(sectionCount).toBeGreaterThan(0);

    console.log(`   ‚úÖ ÍπäÏù¥ÏùΩÍ∏∞: ${sectionCount}Í∞ú ÏÑπÏÖò ÌôïÏù∏`);

    // Ïôú Ïù¥ Íµ¨Ï†àÏù∏Í∞Ä? ÏÑπÏÖò ÌôïÏù∏
    await expect(page.locator('text=Ïôú Ïù¥ Íµ¨Ï†àÏù∏Í∞Ä?')).toBeVisible();

    // Í≤∞Î°† ÏÑπÏÖò ÌôïÏù∏
    await expect(page.locator('text=/Í≤∞Î°†|ÎßàÎ¨¥Î¶¨/')).toBeVisible();

    console.log('   ‚úÖ ÍπäÏù¥ÏùΩÍ∏∞ Î™®Îì† ÏÑπÏÖò Î†åÎçîÎßÅ ÌôïÏù∏');
  });

  test('11-15Ïû• SVG ÏïÑÏù¥ÏΩò Î†åÎçîÎßÅ ÌôïÏù∏', async ({ page }) => {
    console.log('\nüé® SVG ÏïÑÏù¥ÏΩò Î†åÎçîÎßÅ ÌÖåÏä§Ìä∏...\n');

    // Genesis 15:1Î°ú Ïù¥Îèô
    await page.evaluate(() => window.scrollTo({ top: 0, behavior: 'instant' }));
    await page.waitForTimeout(300);
    await page.click('button:has-text("Ï∞ΩÏÑ∏Í∏∞"):has-text("Ïû•")');
    await page.waitForSelector('text=ÏÑ±Í≤Ω ÏÑ†ÌÉù', { timeout: 5000 });
    const genesisButton = page.locator('.grid button').filter({ hasText: 'Ï∞ΩÏÑ∏Í∏∞' }).first();
    await genesisButton.scrollIntoViewIfNeeded();
    await genesisButton.click({ force: true });
    await page.waitForSelector('text=Ï∞ΩÏÑ∏Í∏∞ (50Ïû•)', { timeout: 5000 });
    await page.click('button[id="chapter-15"]');
    await page.waitForSelector('text=ÏÑ±Í≤Ω ÏÑ†ÌÉù', { state: 'hidden', timeout: 5000 });
    await page.waitForSelector('text=Genesis 15:1', { timeout: 10000 });

    // Îã®Ïñ¥Ïû• ÌÉ≠ÏúºÎ°ú Ïù¥Îèô
    await page.click('button:has-text("Îã®Ïñ¥Ïû•")');
    await page.waitForTimeout(500);

    // SVG ÏöîÏÜå ÌôïÏù∏
    const svgElements = page.locator('svg');
    const svgCount = await svgElements.count();
    expect(svgCount).toBeGreaterThan(0);

    console.log(`   ‚úÖ SVG ÏïÑÏù¥ÏΩò: ${svgCount}Í∞ú ÌôïÏù∏`);

    // SVGÍ∞Ä Ïã§Ï†úÎ°ú Î†åÎçîÎßÅÎêòÏóàÎäîÏßÄ ÌôïÏù∏ (ÌÅ¨Í∏∞Í∞Ä 0Ïù¥ ÏïÑÎãåÏßÄ)
    const firstSvg = svgElements.first();
    const boundingBox = await firstSvg.boundingBox();
    expect(boundingBox).toBeTruthy();
    expect(boundingBox!.width).toBeGreaterThan(0);
    expect(boundingBox!.height).toBeGreaterThan(0);

    console.log('   ‚úÖ SVG ÏïÑÏù¥ÏΩòÏù¥ Ï†ïÏÉÅÏ†ÅÏúºÎ°ú Î†åÎçîÎßÅÎê®');
  });

  test('11-15Ïû• ÌÉ≠ Ï†ÑÌôò ÎèôÏûë ÌôïÏù∏', async ({ page }) => {
    console.log('\nüîÑ ÌÉ≠ Ï†ÑÌôò ÌÖåÏä§Ìä∏...\n');

    // Genesis 11:10ÏúºÎ°ú Ïù¥Îèô
    await page.evaluate(() => window.scrollTo({ top: 0, behavior: 'instant' }));
    await page.waitForTimeout(300);
    await page.click('button:has-text("Ï∞ΩÏÑ∏Í∏∞"):has-text("Ïû•")');
    await page.waitForSelector('text=ÏÑ±Í≤Ω ÏÑ†ÌÉù', { timeout: 5000 });
    const genesisButton = page.locator('.grid button').filter({ hasText: 'Ï∞ΩÏÑ∏Í∏∞' }).first();
    await genesisButton.scrollIntoViewIfNeeded();
    await genesisButton.click({ force: true });
    await page.waitForSelector('text=Ï∞ΩÏÑ∏Í∏∞ (50Ïû•)', { timeout: 5000 });
    await page.click('button[id="chapter-11"]');
    await page.waitForSelector('text=ÏÑ±Í≤Ω ÏÑ†ÌÉù', { state: 'hidden', timeout: 5000 });
    await page.waitForSelector('text=Genesis 11:', { timeout: 10000 });

    const tabs = ['Îã®Ïñ¥Ïû•', 'ÍπäÏù¥ÏùΩÍ∏∞', 'ÌÄ¥Ï¶à', 'ÎÖ∏Ìä∏', 'ÏÑ±Ïû•'];

    for (const tab of tabs) {
      await page.click(`button:has-text("${tab}")`);
      await page.waitForTimeout(300);
      console.log(`   ‚úÖ ${tab} ÌÉ≠ Ï†ÑÌôò ÏÑ±Í≥µ`);
    }

    // Îã§Ïãú Î≥∏Î¨∏ ÌÉ≠ÏúºÎ°ú
    await page.click('button:has-text("Î≥∏Î¨∏")');
    await page.waitForTimeout(300);
    console.log('   ‚úÖ Î≥∏Î¨∏ ÌÉ≠ÏúºÎ°ú Î≥µÍ∑Ä');
  });

  test('11-15Ïû• Íµ¨Ï†à ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò ÌôïÏù∏', async ({ page }) => {
    console.log('\n‚¨ÖÔ∏è‚û°Ô∏è Íµ¨Ï†à ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò ÌÖåÏä§Ìä∏...\n');

    // Genesis 11:10ÏúºÎ°ú Ïù¥Îèô
    await page.evaluate(() => window.scrollTo({ top: 0, behavior: 'instant' }));
    await page.waitForTimeout(300);
    await page.click('button:has-text("Ï∞ΩÏÑ∏Í∏∞"):has-text("Ïû•")');
    await page.waitForSelector('text=ÏÑ±Í≤Ω ÏÑ†ÌÉù', { timeout: 5000 });
    const genesisButton = page.locator('.grid button').filter({ hasText: 'Ï∞ΩÏÑ∏Í∏∞' }).first();
    await genesisButton.scrollIntoViewIfNeeded();
    await genesisButton.click({ force: true });
    await page.waitForSelector('text=Ï∞ΩÏÑ∏Í∏∞ (50Ïû•)', { timeout: 5000 });
    await page.click('button[id="chapter-11"]');
    await page.waitForSelector('text=ÏÑ±Í≤Ω ÏÑ†ÌÉù', { state: 'hidden', timeout: 5000 });
    await page.waitForSelector('text=Genesis 11:10', { timeout: 10000 });

    // Îã§Ïùå Íµ¨Ï†àÎ°ú Ïù¥Îèô
    const nextButton = page.locator('button[aria-label="Îã§Ïùå Íµ¨Ï†à"]');
    await nextButton.click();
    await page.waitForTimeout(500);
    await page.waitForSelector('text=Genesis 11:11', { timeout: 5000 });
    console.log('   ‚úÖ Îã§Ïùå Íµ¨Ï†àÎ°ú Ïù¥Îèô (11:10 ‚Üí 11:11)');

    // Ïù¥Ï†Ñ Íµ¨Ï†àÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞
    const prevButton = page.locator('button[aria-label="Ïù¥Ï†Ñ Íµ¨Ï†à"]');
    await prevButton.click();
    await page.waitForTimeout(500);
    await page.waitForSelector('text=Genesis 11:10', { timeout: 5000 });
    console.log('   ‚úÖ Ïù¥Ï†Ñ Íµ¨Ï†àÎ°ú Ïù¥Îèô (11:11 ‚Üí 11:10)');
  });

  test('11-15Ïû• Îç∞Ïù¥ÌÑ∞ ÏôÑÏÑ±ÎèÑ ÌÜµÍ≥Ñ', async ({ page }) => {
    console.log('\nüìä 11-15Ïû• Îç∞Ïù¥ÌÑ∞ ÏôÑÏÑ±ÎèÑ Î∂ÑÏÑù...\n');

    const stats = {
      totalVerses: 0,
      versesWithHebrew: 0,
      versesWithModern: 0,
      versesWithCommentary: 0,
      totalWords: 0,
    };

    // Í∞Å Ïû•Ïùò ÏÉòÌîå Íµ¨Ï†à ÌÖåÏä§Ìä∏
    for (const { chapter, verse } of chaptersToTest) {
      await page.evaluate(() => window.scrollTo({ top: 0, behavior: 'instant' }));
      await page.waitForTimeout(300);
      await page.click('button:has-text("Ï∞ΩÏÑ∏Í∏∞"):has-text("Ïû•")');
      await page.waitForSelector('text=ÏÑ±Í≤Ω ÏÑ†ÌÉù', { timeout: 5000 });
      const genesisButton = page.locator('.grid button').filter({ hasText: 'Ï∞ΩÏÑ∏Í∏∞' }).first();
      await genesisButton.scrollIntoViewIfNeeded();
      await genesisButton.click({ force: true });
      await page.waitForSelector('text=Ï∞ΩÏÑ∏Í∏∞ (50Ïû•)', { timeout: 5000 });
      await page.click(`button[id="chapter-${chapter}"]`);
      await page.waitForSelector('text=ÏÑ±Í≤Ω ÏÑ†ÌÉù', { state: 'hidden', timeout: 5000 });
      await page.waitForSelector(`text=Genesis ${chapter}:${verse}`, { timeout: 10000 });

      stats.totalVerses++;

      // ÌûàÎ∏åÎ¶¨Ïñ¥ ÌôïÏù∏
      const hebrewText = await page.locator('[dir="rtl"]').first().textContent();
      if (hebrewText && hebrewText.length > 0) {
        stats.versesWithHebrew++;
      }

      // ÌòÑÎåÄÏñ¥Ïó≠ ÌôïÏù∏
      const modernText = await page.locator('text=‚ú® ÌòÑÎåÄÏñ¥ ÏùòÏó≠').locator('..').locator('p').textContent();
      if (modernText && !modernText.includes('[TODO')) {
        stats.versesWithModern++;
      }

      // Îã®Ïñ¥Ïû• Îã®Ïñ¥ Ïàò ÌôïÏù∏
      await page.click('button:has-text("Îã®Ïñ¥Ïû•")');
      await page.waitForTimeout(500);
      const wordCards = page.locator('[class*="cursor-pointer"]').filter({ hasText: /^[◊ê-◊™]/ });
      const wordCount = await wordCards.count();
      stats.totalWords += wordCount;

      // ÍπäÏù¥ÏùΩÍ∏∞ ÌôïÏù∏
      await page.click('button:has-text("ÍπäÏù¥ÏùΩÍ∏∞")');
      await page.waitForTimeout(500);
      const hasCommentary = await page.locator('text=Ï∞ΩÏÑ∏Í∏∞').count();
      if (hasCommentary > 0) {
        stats.versesWithCommentary++;
      }

      // Î≥∏Î¨∏ÏúºÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞
      await page.click('button:has-text("Î≥∏Î¨∏")');
      await page.waitForTimeout(300);
    }

    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    console.log('üìä Genesis 11-15Ïû• Îç∞Ïù¥ÌÑ∞ ÏôÑÏÑ±ÎèÑ:');
    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    console.log(`Ï¥ù ÏÉòÌîå Íµ¨Ï†à: ${stats.totalVerses}Í∞ú`);
    console.log(`ÌûàÎ∏åÎ¶¨Ïñ¥ ÌÖçÏä§Ìä∏: ${stats.versesWithHebrew}/${stats.totalVerses} (${(stats.versesWithHebrew/stats.totalVerses*100).toFixed(1)}%)`);
    console.log(`ÌòÑÎåÄÏñ¥Ïó≠: ${stats.versesWithModern}/${stats.totalVerses} (${(stats.versesWithModern/stats.totalVerses*100).toFixed(1)}%)`);
    console.log(`ÍπäÏù¥ÏùΩÍ∏∞ Ï£ºÏÑù: ${stats.versesWithCommentary}/${stats.totalVerses} (${(stats.versesWithCommentary/stats.totalVerses*100).toFixed(1)}%)`);
    console.log(`Ï¥ù Îã®Ïñ¥ Ïàò: ${stats.totalWords}Í∞ú`);
    console.log(`ÌèâÍ∑† Îã®Ïñ¥/Íµ¨Ï†à: ${(stats.totalWords/stats.totalVerses).toFixed(1)}Í∞ú`);
    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n');

    // Î™®Îì† Ìï≠Î™©Ïù¥ 100%Ïù∏ÏßÄ ÌôïÏù∏
    expect(stats.versesWithHebrew).toBe(stats.totalVerses);
    expect(stats.versesWithModern).toBe(stats.totalVerses);
    expect(stats.versesWithCommentary).toBe(stats.totalVerses);
  });
});
