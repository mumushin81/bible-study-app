#!/usr/bin/env tsx
/**
 * Fix Genesis 5 files by adding missing 'id' field and renaming fields
 *
 * Usage: tsx scripts/fixGenesis5Files.ts
 */

import * as fs from 'fs';
import * as path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const filesToFix = [
  'genesis_5_4.json',
  'genesis_5_5.json',
  'genesis_5_6.json',
  'genesis_5_7.json',
  'genesis_5_8.json',
  'genesis_5_9.json',
  'genesis_5_25.json',
  'genesis_5_26.json',
  'genesis_5_27.json',
  'genesis_5_28.json',
];

// Hebrew text mapping for each verse (you'll need to add these)
const hebrewTexts: Record<string, string> = {
  'genesis_5_4': '◊ï÷∑◊ô÷¥÷º÷Ω◊î÷∞◊ô÷£◊ï÷º ◊ô÷∞◊û÷µ◊ô ◊ê÷∏◊ì÷∏÷ó◊ù ◊ê÷∑÷Ω◊ó÷≤◊®÷µ◊ô÷ô ◊î◊ï÷π◊ú÷¥◊ô◊ì÷£◊ï÷π ◊ê÷∂◊™ ◊©÷µ◊Å÷î◊™ ◊©÷∞◊Å◊û÷π◊†÷∂÷•◊î ◊û÷µ◊ê÷π÷ñ◊™ ◊©÷∏◊Å◊†÷∏÷ë◊î ◊ï÷∑◊ô÷º÷•◊ï÷π◊ú÷∂◊ì ◊ë÷∏÷º◊†÷¥÷ñ◊ô◊ù ◊ï÷º◊ë÷∏◊†÷Ω◊ï÷π◊™',
  'genesis_5_5': '◊ï÷∑◊ô÷¥÷º÷Ω◊î÷∞◊ô÷û◊ï÷º ◊õ÷∏÷º◊ú ◊ô÷∞◊û÷µ÷§◊ô ◊ê÷∏◊ì÷∏◊ù÷ô ◊ê÷≤◊©÷∂◊Å◊® ◊ó÷∑÷î◊ô ◊™÷∞÷º◊©÷∑◊Å÷§◊¢ ◊û÷µ◊ê◊ï÷π◊™÷ô ◊©÷∏◊Å◊†÷∏÷î◊î ◊ï÷º◊©÷∞◊Å◊ú÷π◊©÷¥◊Å÷ñ◊ô◊ù ◊©÷∏◊Å◊†÷∏÷ë◊î ◊ï÷∑◊ô÷∏÷º◊û÷π÷Ω◊™',
  'genesis_5_6': '◊ï÷∑÷Ω◊ô÷∞◊ó÷¥◊ô ◊©÷µ◊Å÷ï◊™ ◊ó÷∏◊û÷µ÷•◊©◊Å ◊©÷∏◊Å◊†÷¥÷ñ◊ô◊ù ◊ï÷º◊û÷∞◊ê÷∑÷£◊™ ◊©÷∏◊Å◊†÷∏÷ë◊î ◊ï÷∑◊ô÷º÷ñ◊ï÷π◊ú÷∂◊ì ◊ê÷∂◊™ ◊ê÷±◊†÷Ω◊ï÷π◊©◊Å',
  'genesis_5_7': '◊ï÷∑÷Ω◊ô÷∞◊ó÷¥◊ô ◊©÷µ◊Å÷ó◊™ ◊ê÷∑÷Ω◊ó÷≤◊®÷µ◊ô÷ô ◊î◊ï÷π◊ú÷¥◊ô◊ì÷£◊ï÷π ◊ê÷∂◊™ ◊ê÷±◊†÷î◊ï÷π◊©◊Å ◊©÷∂◊Å÷£◊ë÷∑◊¢ ◊©÷∏◊Å◊†÷¥÷î◊ô◊ù ◊ï÷º◊©÷∞◊Å◊û÷π◊†÷∂÷•◊î ◊û÷µ◊ê÷ñ◊ï÷π◊™ ◊©÷∏◊Å◊†÷∏÷ë◊î ◊ï÷∑◊ô÷º÷•◊ï÷π◊ú÷∂◊ì ◊ë÷∏÷º◊†÷¥÷ñ◊ô◊ù ◊ï÷º◊ë÷∏◊†÷Ω◊ï÷π◊™',
  'genesis_5_8': '◊ï÷∑◊ô÷¥÷º÷Ω◊î÷∞◊ô◊ï÷º÷ô ◊õ÷∏÷º◊ú ◊ô÷∞◊û÷µ◊ô ◊©÷µ◊Å÷î◊™ ◊©÷∞◊Å◊™÷µ÷º÷§◊ô◊ù ◊¢÷∂◊©÷∞◊Ç◊®÷µ◊î÷ô ◊©÷∏◊Å◊†÷∏÷î◊î ◊ï÷º◊™÷∞◊©÷∑◊Å÷•◊¢ ◊û÷µ◊ê÷ñ◊ï÷π◊™ ◊©÷∏◊Å◊†÷∏÷ë◊î ◊ï÷∑◊ô÷∏÷º◊û÷π÷Ω◊™',
  'genesis_5_9': '◊ï÷∑÷Ω◊ô÷∞◊ó÷¥÷•◊ô ◊ê÷±◊†÷ñ◊ï÷π◊©◊Å ◊™÷¥÷º◊©÷∞◊Å◊¢÷¥÷£◊ô◊ù ◊©÷∏◊Å◊†÷∏÷ë◊î ◊ï÷∑◊ô÷º÷ñ◊ï÷π◊ú÷∂◊ì ◊ê÷∂◊™ ◊ß÷µ◊ô◊†÷∏÷Ω◊ü',
  'genesis_5_25': '◊ï÷∑÷Ω◊ô÷∞◊ó÷¥÷£◊ô ◊û÷∞◊™◊ï÷º◊©÷∂◊Å÷î◊ú÷∑◊ó ◊©÷∂◊Å÷ß◊ë÷∑◊¢ ◊ï÷º◊©÷∞◊Å◊û÷π◊†÷¥÷õ◊ô◊ù ◊©÷∏◊Å◊†÷∏÷ñ◊î ◊ï÷º◊û÷∞◊ê÷∑÷£◊™ ◊©÷∏◊Å◊†÷∏÷ë◊î ◊ï÷∑◊ô÷º÷ñ◊ï÷π◊ú÷∂◊ì ◊ê÷∂◊™ ◊ú÷∏÷Ω◊û÷∂◊ö÷∞',
  'genesis_5_26': '◊ï÷∑÷Ω◊ô÷∞◊ó÷¥÷£◊ô ◊û÷∞◊™◊ï÷º◊©÷∂◊Å÷ó◊ú÷∑◊ó ◊ê÷∑÷Ω◊ó÷≤◊®÷µ◊ô÷ô ◊î◊ï÷π◊ú÷¥◊ô◊ì÷£◊ï÷π ◊ê÷∂◊™ ◊ú÷∂÷î◊û÷∂◊ö÷∞ ◊©÷∞◊Å◊™÷∑÷º÷§◊ô÷¥◊ù ◊ï÷º◊©÷∞◊Å◊û◊ï÷π◊†÷¥◊ô◊ù÷ô ◊©÷∏◊Å◊†÷∏÷î◊î ◊ï÷º◊©÷∞◊Å◊ë÷∑÷•◊¢ ◊û÷µ◊ê÷ñ◊ï÷π◊™ ◊©÷∏◊Å◊†÷∏÷ë◊î ◊ï÷∑◊ô÷º÷•◊ï÷π◊ú÷∂◊ì ◊ë÷∏÷º◊†÷¥÷ñ◊ô◊ù ◊ï÷º◊ë÷∏◊†÷Ω◊ï÷π◊™',
  'genesis_5_27': '◊ï÷∑◊ô÷¥÷º÷Ω◊î÷∞◊ô◊ï÷º÷ô ◊õ÷∏÷º◊ú ◊ô÷∞◊û÷µ÷£◊ô ◊û÷∞◊™◊ï÷º◊©÷∂◊Å÷î◊ú÷∑◊ó ◊™÷µ÷º÷§◊©÷∑◊Å◊¢ ◊ï÷∞◊©÷¥◊Å◊©÷¥÷º◊Å◊ô◊ù÷ô ◊©÷∏◊Å◊†÷∏÷î◊î ◊ï÷º◊™÷∞◊©÷∑◊Å÷•◊¢ ◊û÷µ◊ê÷ñ◊ï÷π◊™ ◊©÷∏◊Å◊†÷∏÷ë◊î ◊ï÷∑◊ô÷∏÷º◊û÷π÷Ω◊™',
  'genesis_5_28': '◊ï÷∑÷Ω◊ô÷∞◊ó÷¥◊ô ◊ú÷∂÷ï◊û÷∂◊ö÷∞ ◊©÷∞◊Å◊™÷∑÷º÷ß◊ô÷¥◊ù ◊ï÷º◊©÷∞◊Å◊û÷π◊†÷¥÷õ◊ô◊ù ◊©÷∏◊Å◊†÷∏÷ñ◊î ◊ï÷º◊û÷∞◊ê÷∑÷£◊™ ◊©÷∏◊Å◊†÷∏÷ë◊î ◊ï÷∑◊ô÷º÷ñ◊ï÷π◊ú÷∂◊ì ◊ë÷µ÷º÷Ω◊ü',
};

function fixFile(fileName: string) {
  const filePath = path.join(__dirname, '../data/generated_v2', fileName);

  if (!fs.existsSync(filePath)) {
    console.log(`‚ùå File not found: ${fileName}`);
    return false;
  }

  try {
    // Read the file
    const content = JSON.parse(fs.readFileSync(filePath, 'utf-8'));

    // Extract verse_id to create the id
    const verseId = content.verse_id;
    if (!verseId) {
      console.log(`‚ùå ${fileName}: No verse_id found`);
      return false;
    }

    // Parse verse number from verse_id (e.g., "genesis_5_25" -> 25)
    const verseNumber = parseInt(verseId.split('_')[2]);

    // Create the fixed structure
    const fixed = {
      id: verseId,  // Add the missing 'id' field
      reference: `Genesis 5:${verseNumber}`,  // Add reference
      hebrew: hebrewTexts[verseId] || '',  // Add Hebrew text
      ipa: content.ipa || '',
      koreanPronunciation: content.korean_pronunciation || '',  // Rename to camelCase
      modern: content.modern || '',
      words: content.words || [],
      commentary: content.commentary || {}
    };

    // Write the fixed content back
    fs.writeFileSync(filePath, JSON.stringify(fixed, null, 2), 'utf-8');
    console.log(`‚úÖ Fixed ${fileName}`);
    return true;

  } catch (error: any) {
    console.log(`‚ùå ${fileName}: ${error.message}`);
    return false;
  }
}

function main() {
  console.log('üîß Fixing Genesis 5 files...\n');

  let successCount = 0;
  let failCount = 0;

  for (const file of filesToFix) {
    if (fixFile(file)) {
      successCount++;
    } else {
      failCount++;
    }
  }

  console.log('\nüìä Results:');
  console.log(`‚úÖ Success: ${successCount}`);
  console.log(`‚ùå Failed: ${failCount}`);
}

main();
