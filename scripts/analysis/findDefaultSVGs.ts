import { createClient } from '@supabase/supabase-js';
import * as dotenv from 'dotenv';
import * as path from 'path';

dotenv.config({ path: path.join(process.cwd(), '.env.local') });

const supabaseUrl = process.env.VITE_SUPABASE_URL!;
const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY!;

const supabase = createClient(supabaseUrl, supabaseKey);

interface DefaultPattern {
  pattern: string;
  description: string;
  count: number;
  examples: Array<{
    hebrew: string;
    meaning: string;
    grammar: string;
  }>;
}

async function findDefaultSVGs() {
  console.log('üîç ÎîîÌè¥Ìä∏ SVG Ìå®ÌÑ¥ Í≤ÄÏÉâ Ï§ë...\n');

  // Ï†ÑÏ≤¥ SVG ÏûàÎäî Îã®Ïñ¥ Ï°∞Ìöå
  const { data: allWords, error } = await supabase
    .from('words')
    .select('hebrew, meaning, grammar, icon_svg')
    .not('icon_svg', 'is', null)
    .order('hebrew');

  if (error) {
    console.error('‚ùå ÏóêÎü¨:', error);
    return;
  }

  console.log(`üìä Ï†ÑÏ≤¥ SVG ÏûàÎäî Îã®Ïñ¥: ${allWords?.length || 0}Í∞ú\n`);

  // ÎîîÌè¥Ìä∏ Ìå®ÌÑ¥ Ï†ïÏùò
  const defaultPatterns: DefaultPattern[] = [];

  // Ìå®ÌÑ¥ 1: Î¨∏ÏÑú Î™®Ïñë (ÏßÅÏÇ¨Í∞ÅÌòï)
  const documentPattern = allWords?.filter(w =>
    w.icon_svg?.includes('<rect') &&
    w.icon_svg?.includes('rx="4"') &&
    !w.icon_svg?.includes('filter="drop-shadow"')
  ) || [];

  if (documentPattern.length > 0) {
    defaultPatterns.push({
      pattern: 'document-rectangle',
      description: 'Î¨∏ÏÑú Î™®Ïñë (ÏßÅÏÇ¨Í∞ÅÌòï)',
      count: documentPattern.length,
      examples: documentPattern.slice(0, 5).map(w => ({
        hebrew: w.hebrew,
        meaning: w.meaning || '',
        grammar: w.grammar || ''
      }))
    });
  }

  // Ìå®ÌÑ¥ 2: Í∏∞Î≥∏ ÏõêÌòï (Îã®Ïàú circleÎßå)
  const simpleCirclePattern = allWords?.filter(w => {
    const svg = w.icon_svg || '';
    const circleCount = (svg.match(/<circle/g) || []).length;
    const hasOtherShapes = svg.includes('<path') || svg.includes('<rect') ||
                           svg.includes('<polygon') || svg.includes('<ellipse');
    return circleCount === 1 && !hasOtherShapes && !svg.includes('<defs>');
  }) || [];

  if (simpleCirclePattern.length > 0) {
    defaultPatterns.push({
      pattern: 'simple-circle',
      description: 'Îã®Ïàú ÏõêÌòï (circleÎßå)',
      count: simpleCirclePattern.length,
      examples: simpleCirclePattern.slice(0, 5).map(w => ({
        hebrew: w.hebrew,
        meaning: w.meaning || '',
        grammar: w.grammar || ''
      }))
    });
  }

  // Ìå®ÌÑ¥ 3: gradient ÏóÜÎäî SVG
  const noGradientPattern = allWords?.filter(w =>
    w.icon_svg &&
    !w.icon_svg.includes('<defs>') &&
    !w.icon_svg.includes('gradient')
  ) || [];

  if (noGradientPattern.length > 0) {
    defaultPatterns.push({
      pattern: 'no-gradient',
      description: 'Gradient ÏóÜÏùå (Í∞ÄÏù¥ÎìúÎùºÏù∏ ÎØ∏Ï§ÄÏàò)',
      count: noGradientPattern.length,
      examples: noGradientPattern.slice(0, 5).map(w => ({
        hebrew: w.hebrew,
        meaning: w.meaning || '',
        grammar: w.grammar || ''
      }))
    });
  }

  // Ìå®ÌÑ¥ 4: drop-shadow ÏóÜÎäî SVG
  const noShadowPattern = allWords?.filter(w =>
    w.icon_svg &&
    !w.icon_svg.includes('drop-shadow')
  ) || [];

  if (noShadowPattern.length > 0) {
    defaultPatterns.push({
      pattern: 'no-shadow',
      description: 'Drop-shadow ÏóÜÏùå (Í∞ÄÏù¥ÎìúÎùºÏù∏ ÎØ∏Ï§ÄÏàò)',
      count: noShadowPattern.length,
      examples: noShadowPattern.slice(0, 5).map(w => ({
        hebrew: w.hebrew,
        meaning: w.meaning || '',
        grammar: w.grammar || ''
      }))
    });
  }

  // Ìå®ÌÑ¥ 5: Îß§Ïö∞ Îã®ÏàúÌïú SVG (shape 1Í∞ú Ïù¥Ìïò)
  const verySimplePattern = allWords?.filter(w => {
    const svg = w.icon_svg || '';
    const shapeCount = (svg.match(/<(circle|rect|path|polygon|ellipse|line)/g) || []).length;
    return shapeCount <= 1;
  }) || [];

  if (verySimplePattern.length > 0) {
    defaultPatterns.push({
      pattern: 'very-simple',
      description: 'Îß§Ïö∞ Îã®Ïàú (shape 1Í∞ú Ïù¥Ìïò)',
      count: verySimplePattern.length,
      examples: verySimplePattern.slice(0, 5).map(w => ({
        hebrew: w.hebrew,
        meaning: w.meaning || '',
        grammar: w.grammar || ''
      }))
    });
  }

  // Ìå®ÌÑ¥ 6: ÎèôÏùºÌïú SVG Î∞òÎ≥µ ÏÇ¨Ïö©
  const svgMap = new Map<string, Array<{hebrew: string, meaning: string, grammar: string}>>();
  allWords?.forEach(w => {
    if (w.icon_svg) {
      const normalized = w.icon_svg.replace(/id="[^"]+"/g, 'id="X"').replace(/url\(#[^)]+\)/g, 'url(#X)');
      if (!svgMap.has(normalized)) {
        svgMap.set(normalized, []);
      }
      svgMap.get(normalized)!.push({
        hebrew: w.hebrew,
        meaning: w.meaning || '',
        grammar: w.grammar || ''
      });
    }
  });

  const duplicateSVGs = Array.from(svgMap.entries())
    .filter(([_, words]) => words.length > 10) // 10Î≤à Ïù¥ÏÉÅ Î∞òÎ≥µ
    .sort((a, b) => b[1].length - a[1].length);

  if (duplicateSVGs.length > 0) {
    duplicateSVGs.forEach(([svg, words]) => {
      defaultPatterns.push({
        pattern: 'duplicate-svg',
        description: `ÎèôÏùº SVG Î∞òÎ≥µ ÏÇ¨Ïö© (${words.length}Ìöå)`,
        count: words.length,
        examples: words.slice(0, 5)
      });
    });
  }

  // Í≤∞Í≥º Ï∂úÎ†•
  console.log('=' .repeat(80));
  console.log('üìã ÎîîÌè¥Ìä∏ SVG Ìå®ÌÑ¥ Î∂ÑÏÑù Í≤∞Í≥º');
  console.log('='.repeat(80));
  console.log();

  if (defaultPatterns.length === 0) {
    console.log('‚úÖ ÎîîÌè¥Ìä∏ Ìå®ÌÑ¥Ïù¥ Î∞úÍ≤¨ÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§!');
    console.log('   Î™®Îì† SVGÍ∞Ä Ïª§Ïä§ÌÑ∞ÎßàÏù¥Ï¶àÎêòÏñ¥ ÏûàÏäµÎãàÎã§.');
    return;
  }

  defaultPatterns.forEach((pattern, index) => {
    console.log(`${index + 1}. ${pattern.description}`);
    console.log(`   Ìå®ÌÑ¥: ${pattern.pattern}`);
    console.log(`   Í∞úÏàò: ${pattern.count}Í∞ú`);
    console.log(`   ÏòàÏãú:`);
    pattern.examples.forEach((ex, i) => {
      console.log(`     ${i + 1}) ${ex.hebrew} - ${ex.meaning} (${ex.grammar})`);
    });
    console.log();
  });

  // ÌÜµÍ≥Ñ ÏöîÏïΩ
  console.log('='.repeat(80));
  console.log('üìä ÌÜµÍ≥Ñ ÏöîÏïΩ');
  console.log('='.repeat(80));
  console.log();

  const totalDefaults = defaultPatterns.reduce((sum, p) => {
    // duplicate-svg Ìå®ÌÑ¥ÏùÄ Ï§ëÎ≥µ Í≥ÑÏÇ∞ Î∞©ÏßÄ
    if (p.pattern === 'duplicate-svg') return sum;
    return sum + p.count;
  }, 0);

  const duplicateCount = defaultPatterns
    .filter(p => p.pattern === 'duplicate-svg')
    .reduce((sum, p) => sum + p.count, 0);

  console.log(`Ï†ÑÏ≤¥ SVG Îã®Ïñ¥: ${allWords?.length || 0}Í∞ú`);
  console.log(`ÎîîÌè¥Ìä∏ Ìå®ÌÑ¥: ${totalDefaults}Í∞ú (${((totalDefaults / (allWords?.length || 1)) * 100).toFixed(1)}%)`);
  if (duplicateCount > 0) {
    console.log(`Ï§ëÎ≥µ SVG: ${duplicateCount}Í∞ú`);
  }
  console.log();

  // Í∞ÄÏù¥ÎìúÎùºÏù∏ Ï§ÄÏàòÏú®
  const withGradient = allWords?.filter(w => w.icon_svg?.includes('gradient')).length || 0;
  const withShadow = allWords?.filter(w => w.icon_svg?.includes('drop-shadow')).length || 0;

  console.log('Í∞ÄÏù¥ÎìúÎùºÏù∏ Ï§ÄÏàòÏú®:');
  console.log(`  Gradient ÏÇ¨Ïö©: ${withGradient}Í∞ú (${((withGradient / (allWords?.length || 1)) * 100).toFixed(1)}%)`);
  console.log(`  Drop-shadow ÏÇ¨Ïö©: ${withShadow}Í∞ú (${((withShadow / (allWords?.length || 1)) * 100).toFixed(1)}%)`);
  console.log();

  // CSV Ï∂úÎ†•
  console.log('='.repeat(80));
  console.log('üìÑ ÏÉÅÏÑ∏ Î¶¨Ïä§Ìä∏ (CSV ÌòïÏãù)');
  console.log('='.repeat(80));
  console.log();
  console.log('Pattern,Hebrew,Meaning,Grammar');

  defaultPatterns.forEach(pattern => {
    if (pattern.pattern !== 'duplicate-svg') {
      pattern.examples.forEach(ex => {
        console.log(`"${pattern.pattern}","${ex.hebrew}","${ex.meaning}","${ex.grammar}"`);
      });
    }
  });
}

findDefaultSVGs().catch(console.error);
