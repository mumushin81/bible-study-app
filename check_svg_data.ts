import { createClient } from '@supabase/supabase-js';
import * as dotenv from 'dotenv';
import * as path from 'path';

dotenv.config({ path: path.resolve(process.cwd(), '.env.local') });

const supabaseUrl = process.env.VITE_SUPABASE_URL!;
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY!;
const supabase = createClient(supabaseUrl, supabaseKey);

async function checkSVGData() {
  console.log('üìä SVG Îç∞Ïù¥ÌÑ∞ ÌôïÏù∏ Ï§ë...\n');

  // 1. SVGÍ∞Ä ÏûàÎäî Îã®Ïñ¥ Í∞úÏàò
  const { data: wordsWithSVG, error: error1 } = await supabase
    .from('words')
    .select('id')
    .not('icon_svg', 'is', null);

  if (error1) {
    console.error('‚ùå Error:', error1);
    return;
  }

  console.log(`‚úÖ SVGÍ∞Ä ÏûàÎäî Îã®Ïñ¥: ${wordsWithSVG?.length || 0}Í∞ú`);

  // 2. SVGÍ∞Ä ÏóÜÎäî Îã®Ïñ¥ Í∞úÏàò
  const { data: wordsWithoutSVG, error: error2 } = await supabase
    .from('words')
    .select('id')
    .is('icon_svg', null);

  if (error2) {
    console.error('‚ùå Error:', error2);
    return;
  }

  console.log(`‚ùå SVGÍ∞Ä ÏóÜÎäî Îã®Ïñ¥: ${wordsWithoutSVG?.length || 0}Í∞ú\n`);

  // 3. SVG ÏÉòÌîå ÌôïÏù∏ (Ï≤´ 3Í∞ú)
  const { data: sampleWords, error: error3 } = await supabase
    .from('words')
    .select('hebrew, meaning, icon_svg')
    .not('icon_svg', 'is', null)
    .limit(3);

  if (error3) {
    console.error('‚ùå Error:', error3);
    return;
  }

  console.log('üìù SVG ÏÉòÌîå (Ï≤´ 3Í∞ú):\n');
  sampleWords?.forEach((word, idx) => {
    console.log(`${idx + 1}. ${word.hebrew} (${word.meaning})`);
    console.log(`   SVG Í∏∏Ïù¥: ${word.icon_svg?.length || 0} Î¨∏Ïûê`);
    console.log(`   SVG ÎØ∏Î¶¨Î≥¥Í∏∞: ${word.icon_svg?.substring(0, 100)}...`);
    console.log('');
  });
}

checkSVGData();
