import { useState, useMemo, useCallback } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Search, TrendingUp, Volume2, BookOpen, BarChart3, List, Sparkles } from 'lucide-react';
import FlashCard from './shared/FlashCard';
import HebrewIcon from './shared/HebrewIcon';
import BookProgressDashboard from './BookProgressDashboard';
import RootFlashcardDeck from './RootFlashcardDeck';
import RootCard from './RootCard';
import { RootGridSkeleton } from './shared/SkeletonLoader';
import { useWords, WordWithContext } from '../hooks/useWords';
import { useBookmarks } from '../hooks/useBookmarks';
import { useSRS } from '../hooks/useSRS';
import { useBooks } from '../hooks/useBooks';
import { useBookProgress } from '../hooks/useBookProgress';
import { useHebrewRoots, type HebrewRoot } from '../hooks/useHebrewRoots';
import {
  getWordEmoji,
  getWordColor,
  getSimpleGrammar,
  getGrammarEmoji,
  getTheologicalMeaning,
  speakHebrew,
} from '../utils/wordHelpers';

interface VocabularyTabProps {
  darkMode: boolean;
}

type SubTab = 'all' | 'bookmarked' | 'study' | 'new' | 'review' | 'difficult';
type ViewMode = 'words' | 'dashboard' | 'roots';

export default function VocabularyTab({ darkMode }: VocabularyTabProps) {
  // UI ÏÉÅÌÉú
  const [viewMode, setViewMode] = useState<ViewMode>('words');
  const [selectedBook, setSelectedBook] = useState<string>('genesis');
  const [activeSubTab, setActiveSubTab] = useState<SubTab>('all');
  const [searchQuery, setSearchQuery] = useState('');
  const [flippedCard, setFlippedCard] = useState<string | null>(null);
  const [flippedCards, setFlippedCards] = useState<Set<string>>(new Set());
  const [studyMode, setStudyMode] = useState(false);
  const [currentStudyIndex, setCurrentStudyIndex] = useState(0);
  const [selectedRoot, setSelectedRoot] = useState<HebrewRoot | null>(null);
  const [displayedRootsCount, setDisplayedRootsCount] = useState(15); // Ï¥àÍ∏∞Ïóê 15Í∞úÎßå ÌëúÏãú

  // Îç∞Ïù¥ÌÑ∞ hooks
  const { books, loading: booksLoading } = useBooks();
  const { progress: bookProgress, loading: progressLoading } = useBookProgress(selectedBook);
  const { words: allWords, loading: wordsLoading, error: wordsError } = useWords({
    bookId: selectedBook,
  });
  const { bookmarkedWords, toggleBookmark, isBookmarked } = useBookmarks();
  const { srsData, updateSRS, isDueForReview, isMastered, getStats } = useSRS();
  const { roots, loading: rootsLoading } = useHebrewRoots();

  // ÌëúÏãúÌï† Ïñ¥Í∑º Î™©Î°ù (ÏÑ±Îä• ÏµúÏ†ÅÌôî)
  const displayedRoots = useMemo(() => {
    return roots.slice(0, displayedRootsCount);
  }, [roots, displayedRootsCount]);

  // Ïñ¥Í∑º ÏÑ†ÌÉù Ìï∏Îì§Îü¨ (useCallbackÏúºÎ°ú ÏµúÏ†ÅÌôî)
  const handleRootSelect = useCallback((root: HebrewRoot) => {
    setSelectedRoot(root);
  }, []);

  // Îçî Î≥¥Í∏∞ Ìï∏Îì§Îü¨
  const loadMoreRoots = useCallback(() => {
    setDisplayedRootsCount(prev => Math.min(prev + 15, roots.length));
  }, [roots.length]);

  // ÌîåÎûòÏãúÏπ¥Îìú Îí§ÏßëÍ∏∞ ÌÜ†Í∏Ä
  const toggleFlip = (hebrew: string) => {
    const newFlipped = new Set(flippedCards);
    if (newFlipped.has(hebrew)) {
      newFlipped.delete(hebrew);
    } else {
      newFlipped.add(hebrew);
    }
    setFlippedCards(newFlipped);
  };

  // Í≤ÄÏÉâ Î∞è ÌïÑÌÑ∞ÎßÅÎêú Îã®Ïñ¥
  const filteredWords = useMemo(() => {
    let words = allWords;

    // ÏÑúÎ∏åÌÉ≠ ÌïÑÌÑ∞
    if (activeSubTab === 'bookmarked') {
      words = words.filter(w => bookmarkedWords.has(w.hebrew));
    } else if (activeSubTab === 'study') {
      words = words.filter(w => isDueForReview(w.hebrew));
    } else if (activeSubTab === 'new') {
      // ÏÉà Îã®Ïñ¥: Ìïú Î≤àÎèÑ Î≥µÏäµÌïòÏßÄ ÏïäÏùÄ Îã®Ïñ¥
      words = words.filter(w => !srsData.has(w.hebrew));
    } else if (activeSubTab === 'review') {
      // Î≥µÏäµ ÎåÄÍ∏∞: Ïò§Îäò Î≥µÏäµÌï¥Ïïº ÌïòÎäî Îã®Ïñ¥
      words = words.filter(w => isDueForReview(w.hebrew) && !isMastered(w.hebrew));
    } else if (activeSubTab === 'difficult') {
      // Ïñ¥Î†§Ïö¥ Îã®Ïñ¥: Ï†ïÌôïÎèÑÍ∞Ä 60% Ïù¥ÌïòÏù∏ Îã®Ïñ¥
      words = words.filter(w => {
        const srs = srsData.get(w.hebrew);
        if (!srs) return false;
        // ÏûÑÏãúÎ°ú reviewCount Í∏∞Ï§Ä ÏÇ¨Ïö© (ÎÇòÏ§ëÏóê accuracy Ï∂îÍ∞Ä)
        return srs.reviewCount >= 3 && srs.easeFactor < 2.0;
      });
    }

    // Í≤ÄÏÉâ ÌïÑÌÑ∞
    if (searchQuery.trim()) {
      const query = searchQuery.toLowerCase();
      words = words.filter(w =>
        w.hebrew.includes(searchQuery) ||
        w.meaning.toLowerCase().includes(query) ||
        w.korean.toLowerCase().includes(query)
      );
    }

    return words;
  }, [allWords, activeSubTab, bookmarkedWords, searchQuery, isDueForReview, isMastered, srsData]);

  // ÌÜµÍ≥Ñ
  const stats = useMemo(() => {
    const allHebrews = allWords.map(w => w.hebrew);
    const srsStats = getStats(allHebrews);

    const bookmarked = Array.from(bookmarkedWords).filter(hebrew =>
      allWords.some(w => w.hebrew === hebrew)
    ).length;

    return {
      total: srsStats.total,
      bookmarked,
      mastered: srsStats.mastered,
      dueToday: srsStats.dueToday,
    };
  }, [allWords, bookmarkedWords, getStats]);

  // SRS ÏóÖÎç∞Ïù¥Ìä∏ + Îã§Ïùå Ïπ¥ÎìúÎ°ú Ïù¥Îèô
  const handleSRSUpdate = (hebrew: string, quality: number) => {
    updateSRS(hebrew, quality);

    // Îã§Ïùå Ïπ¥ÎìúÎ°ú
    if (studyMode && currentStudyIndex < filteredWords.length - 1) {
      setCurrentStudyIndex(prev => prev + 1);
      setFlippedCard(null);
    } else if (studyMode) {
      setStudyMode(false);
      setCurrentStudyIndex(0);
    }
  };

  // Helper functions for study mode (ÏïîÍ∏∞ Î™®ÎìúÏóêÏÑúÎßå ÏÇ¨Ïö©)
  const getWordEmoji = (word: WordWithContext) => {
    if (word.emoji) return word.emoji;
    const meaning = word.meaning.toLowerCase();

    if (meaning.includes('ÌïòÎÇòÎãò') || meaning.includes('ÏóòÎ°úÌûò')) return 'üëë';
    if (meaning.includes('Ï≤òÏùå') || meaning.includes('ÌÉúÏ¥à') || meaning.includes('Î≤†Î†àÏâ¨Ìä∏')) return 'üåÖ';
    if (meaning.includes('Ï∞ΩÏ°∞') || meaning.includes('Î∞îÎùº')) return '‚ú®';
    if (meaning.includes('ÌïòÎäò') || meaning.includes('ÏÉ§ÎßàÏûÑ')) return '‚òÅÔ∏è';
    if (meaning.includes('ÎïÖ') || meaning.includes('ÏóêÎ†àÏ∏†') || meaning.includes('ÏßÄÍµ¨')) return 'üåè';
    if (meaning.includes('Îπõ') || meaning.includes('Ïò§Î•¥')) return 'üåü';
    if (meaning.includes('Ïñ¥Îë†') || meaning.includes('Ïñ¥Îëê')) return 'üåô';
    if (meaning.includes('Î¨º') && !meaning.includes('Î™©Ï†Å')) return 'üíé';
    if (meaning.includes('Î∞îÎã§')) return 'üåä';
    if (meaning.includes('Ìï¥') || meaning.includes('ÌÉúÏñë')) return '‚òÄÔ∏è';
    if (meaning.includes('Îã¨')) return 'üåô';
    if (meaning.includes('Î≥Ñ')) return '‚≠ê';
    if (meaning.includes('ÎÇòÎ¨¥') || meaning.includes('ÏãùÎ¨º')) return 'üå≥';
    if (meaning.includes('Ïó¥Îß§') || meaning.includes('Í≥ºÏùº')) return 'üçé';
    if (meaning.includes('ÏÉà') || meaning.includes('ÎÇ†Í∞ú')) return 'üïäÔ∏è';
    if (meaning.includes('Î¨ºÍ≥†Í∏∞')) return 'üê†';
    if (meaning.includes('ÏÇ¨Îûå') || meaning.includes('Ïù∏Í∞Ñ') || meaning.includes('ÏïÑÎã¥')) return 'üßë';
    if (meaning.includes('Ïó¨Ïûê') || meaning.includes('Ïù¥Î∏å')) return 'üë©';
    if (meaning.includes('ÎÇ®Ïûê')) return 'üë®';
    if (meaning.includes('ÏÉùÎ™Ö') || meaning.includes('ÏÇ¥Îã§')) return 'üíö';
    if (meaning.includes('ÏòÅ') || meaning.includes('Ïà®')) return 'üí®';
    if (meaning.includes('ÎßêÏîÄ') || meaning.includes('ÎßêÌïò')) return 'üí¨';
    if (meaning.includes('Ï∂ïÎ≥µ')) return 'üôè';
    if (meaning.includes('ÏÑ†') || meaning.includes('Ï¢ã')) return 'üòä';
    if (meaning.includes('ÏïÖ') || meaning.includes('ÎÇòÏÅ®')) return '‚ö†Ô∏è';
    if (meaning.includes('Î™©Ï†ÅÍ≤©')) return 'üéØ';
    if (meaning.includes('Í∑∏Î¶¨Í≥†') || meaning.includes('Ï†ëÏÜç')) return '‚ûï';

    if (word.grammar?.includes('ÎèôÏÇ¨')) return 'üî•';
    if (word.grammar?.includes('Î™ÖÏÇ¨')) return 'üí†';
    if (word.grammar?.includes('ÌòïÏö©ÏÇ¨')) return 'üé®';
    if (word.grammar?.includes('Ï†ÑÏπòÏÇ¨') || word.grammar?.includes('Ï°∞ÏÇ¨')) return 'üîó';
    if (word.grammar?.includes('ÎåÄÎ™ÖÏÇ¨')) return 'üëâ';
    if (word.grammar?.includes('ÏàòÏÇ¨')) return 'üî¢';

    return 'üìú';
  };

  const getWordColor = (word: WordWithContext) => {
    const grammar = word.grammar?.toLowerCase() || '';

    if (grammar.includes('Î™ÖÏÇ¨')) {
      return darkMode
        ? { bg: 'bg-gradient-to-br from-blue-900/50 via-blue-800/40 to-indigo-900/50', border: 'border-blue-500/30' }
        : { bg: 'bg-gradient-to-br from-blue-100/90 via-blue-50/90 to-indigo-100/90', border: 'border-blue-300/50' };
    }

    if (grammar.includes('ÎèôÏÇ¨')) {
      return darkMode
        ? { bg: 'bg-gradient-to-br from-red-900/50 via-rose-800/40 to-pink-900/50', border: 'border-red-500/30' }
        : { bg: 'bg-gradient-to-br from-red-100/90 via-rose-50/90 to-pink-100/90', border: 'border-red-300/50' };
    }

    if (grammar.includes('ÌòïÏö©ÏÇ¨')) {
      return darkMode
        ? { bg: 'bg-gradient-to-br from-green-900/50 via-emerald-800/40 to-teal-900/50', border: 'border-green-500/30' }
        : { bg: 'bg-gradient-to-br from-green-100/90 via-emerald-50/90 to-teal-100/90', border: 'border-green-300/50' };
    }

    if (grammar.includes('Ï†ÑÏπòÏÇ¨') || grammar.includes('Ï°∞ÏÇ¨')) {
      return darkMode
        ? { bg: 'bg-gradient-to-br from-yellow-900/50 via-amber-800/40 to-orange-900/50', border: 'border-yellow-500/30' }
        : { bg: 'bg-gradient-to-br from-yellow-100/90 via-amber-50/90 to-orange-100/90', border: 'border-yellow-300/50' };
    }

    if (grammar.includes('Î∂ÄÏÇ¨')) {
      return darkMode
        ? { bg: 'bg-gradient-to-br from-purple-900/50 via-violet-800/40 to-fuchsia-900/50', border: 'border-purple-500/30' }
        : { bg: 'bg-gradient-to-br from-purple-100/90 via-violet-50/90 to-fuchsia-100/90', border: 'border-purple-300/50' };
    }

    if (grammar.includes('Ï†ëÏÜçÏÇ¨')) {
      return darkMode
        ? { bg: 'bg-gradient-to-br from-cyan-900/50 via-sky-800/40 to-blue-900/50', border: 'border-cyan-500/30' }
        : { bg: 'bg-gradient-to-br from-cyan-100/90 via-sky-50/90 to-blue-100/90', border: 'border-cyan-300/50' };
    }

    return darkMode
      ? { bg: 'bg-gradient-to-br from-purple-900/40 via-pink-900/40 to-blue-900/40', border: 'border-purple-400/30' }
      : { bg: 'bg-gradient-to-br from-purple-50/80 via-pink-50/80 to-blue-50/80', border: 'border-purple-200/50' };
  };

  const speak = (text: string) => {
    if ('speechSynthesis' in window) {
      window.speechSynthesis.cancel();
      const utterance = new SpeechSynthesisUtterance(text);
      utterance.lang = 'he-IL';
      utterance.rate = 0.8;
      window.speechSynthesis.speak(utterance);
    }
  };

  // Í∞ÑÎã®Ìïú ÌíàÏÇ¨ Î≥ÄÌôò
  const getSimpleGrammar = (grammar: string) => {
    if (grammar.includes('Î™ÖÏÇ¨')) return 'Î™ÖÏÇ¨';
    if (grammar.includes('ÎèôÏÇ¨')) return 'ÎèôÏÇ¨';
    if (grammar.includes('ÌòïÏö©ÏÇ¨')) return 'ÌòïÏö©ÏÇ¨';
    if (grammar.includes('Ï†ÑÏπòÏÇ¨') || grammar.includes('Ï°∞ÏÇ¨')) return 'Ï†ÑÏπòÏÇ¨';
    if (grammar.includes('Ï†ëÏÜçÏÇ¨')) return 'Ï†ëÏÜçÏÇ¨';
    if (grammar.includes('Î∂ÄÏÇ¨')) return 'Î∂ÄÏÇ¨';
    if (grammar.includes('ÎåÄÎ™ÖÏÇ¨')) return 'ÎåÄÎ™ÖÏÇ¨';
    return 'Í∏∞ÌÉÄ';
  };

  // ÌíàÏÇ¨Î≥Ñ Ïù¥Î™®ÏßÄ
  const getGrammarEmoji = (grammar: string) => {
    if (grammar.includes('Î™ÖÏÇ¨')) return 'üí†';
    if (grammar.includes('ÎèôÏÇ¨')) return 'üî•';
    if (grammar.includes('ÌòïÏö©ÏÇ¨')) return 'üé®';
    if (grammar.includes('Ï†ÑÏπòÏÇ¨') || grammar.includes('Ï°∞ÏÇ¨')) return 'üîó';
    if (grammar.includes('Ï†ëÏÜçÏÇ¨')) return '‚ûï';
    if (grammar.includes('Î∂ÄÏÇ¨')) return 'üí´';
    if (grammar.includes('ÎåÄÎ™ÖÏÇ¨')) return 'üëâ';
    return 'üìú';
  };

  // Ïã†ÌïôÏ†Å ÏùòÎØ∏ Ï†úÍ≥µ
  const getTheologicalMeaning = (word: WordWithContext) => {
    const hebrew = word.hebrew;
    const meaning = word.meaning.toLowerCase();

    // ÌäπÏ†ï Îã®Ïñ¥Îì§Ïóê ÎåÄÌïú Ïã†ÌïôÏ†Å ÏùòÎØ∏
    if (hebrew === '◊ë÷º÷∞◊®÷µ◊ê◊©÷¥◊Å◊ô◊™') {
      return 'ÏãúÍ∞ÑÏùò Ï†àÎåÄÏ†Å ÏãúÏûëÏ†ê. ÌïòÎÇòÎãòÏù¥ ÏãúÍ∞Ñ, Í≥µÍ∞Ñ, Î¨ºÏßàÏùÑ Ï∞ΩÏ°∞ÌïòÏã† Í∑∏ ÏàúÍ∞ÑÏùÑ Í∞ÄÎ¶¨ÌÇµÎãàÎã§.';
    }
    if (hebrew === '◊ë÷º÷∏◊®÷∏◊ê') {
      return 'Ïò§ÏßÅ ÌïòÎÇòÎãòÎßåÏù¥ Ìï† Ïàò ÏûàÎäî Î¨¥ÏóêÏÑú Ïú†Î•º ÎßåÎìúÎäî Ï∞ΩÏ°∞. Ïù∏Í∞ÑÏùò ‚ÄúÎßåÎì§Í∏∞‚ÄùÏôÄÎäî Ï∞®ÏõêÏù¥ Îã§Î¶ÖÎãàÎã§.';
    }
    if (hebrew === '◊ê÷±◊ú÷π◊î÷¥◊ô◊ù') {
      return 'ÌòïÌÉúÎäî Î≥µÏàòÏù¥ÏßÄÎßå Îã®Ïàò ÎèôÏÇ¨ÏôÄ ÏÇ¨Ïö©ÎêòÎäî ‚ÄúÏ°¥ÏóÑÏùò Î≥µÏàò‚Äù. ÌïòÎÇòÎãòÏùò Î¨¥ÌïúÌïú ÏúÑÏóÑÍ≥º Í∂åÎä•ÏùÑ ÎÇòÌÉÄÎÉÖÎãàÎã§.';
    }
    if (hebrew === '◊î÷∑◊©◊Å÷º÷∏◊û÷∑◊ô÷¥◊ù') {
      return 'Î≥µÏàòÌòïÏúºÎ°ú ÏÇ¨Ïö©ÎêòÏñ¥ ÌïòÎäòÏùò Î∞©ÎåÄÌï®Í≥º Ï∏µÏ∞®ÏÑ±ÏùÑ ÌëúÌòÑ. Î¨ºÎ¶¨Ï†Å ÌïòÎäòÍ≥º ÏòÅÏ†Å ÌïòÎäòÏùÑ Î™®Îëê Ìè¨Ìï®Ìï©ÎãàÎã§.';
    }
    if (hebrew === '◊î÷∏◊ê÷∏◊®÷∂◊•') {
      return 'ÌïòÎÇòÎãòÏù¥ Ïù∏Í∞ÑÏùÑ ÏúÑÌï¥ ÌäπÎ≥ÑÌûà Ï§ÄÎπÑÌïòÏã† Í±∞Ï£º Í≥µÍ∞Ñ. Î¨ºÎ¶¨Ï†Å ÌôòÍ≤ΩÏù¥Ïûê ÏòÅÏ†Å ÏÉùÌôúÏùò Î¨¥ÎåÄÏûÖÎãàÎã§.';
    }
    if (hebrew === '◊ê÷µ◊™') {
      return 'ÌûàÎ∏åÎ¶¨Ïñ¥ÏóêÎßå ÏûàÎäî ÎèÖÌäπÌïú Î¨∏Î≤ï ÏöîÏÜå. ÏßÅÏ†ë Î™©Ï†ÅÏñ¥Í∞Ä ÌäπÎ≥ÑÌûà Ï§ëÏöîÌï®ÏùÑ Í∞ïÏ°∞Ìï©ÎãàÎã§.';
    }
    if (meaning.includes('Îπõ')) {
      return 'Îã®ÏàúÌïú Î¨ºÎ¶¨Ï†Å ÎπõÏù¥ ÏïÑÎãàÎùº ÌïòÎÇòÎãòÏùò ÏßÑÎ¶¨ÏôÄ Í±∞Î£©Ìï®ÏùÑ ÏÉÅÏßïÌïòÎäî ÏòÅÏ†Å Ïã§Ïû¨ÏûÖÎãàÎã§.';
    }
    if (meaning.includes('Ïñ¥Îë†')) {
      return 'ÌïòÎÇòÎãòÏù¥ ÏïÑÏßÅ ÎπõÏúºÎ°ú ÏßàÏÑúÎ•º Î∂ÄÏó¨ÌïòÏßÄ ÏïäÏùÄ ÏÉÅÌÉú. ÌòºÎèàÍ≥º Î¨¥ÏßàÏÑúÎ•º ÏùòÎØ∏Ìï©ÎãàÎã§.';
    }
    if (meaning.includes('Î¨º')) {
      return 'ÏÉùÎ™ÖÏùò ÏõêÏÜåÏù¥Ïûê Ï†ïÍ≤∞ÏùÑ ÏÉÅÏßï. ÏÑ∏Î°ÄÏôÄ Ï§ëÏÉùÏùò ÏòÅÏ†Å ÏùòÎØ∏Î°ú ÌôïÏû•Îê©ÎãàÎã§.';
    }
    
    // Í∏∞Î≥∏ Ïã†ÌïôÏ†Å ÏùòÎØ∏
    if (word.grammar?.includes('ÎèôÏÇ¨')) {
      return 'ÌïòÎÇòÎãòÏùò Ï†ÅÍ∑πÏ†ÅÏù∏ ÌñâÏúÑÎ•º ÎÇòÌÉÄÎÉÑ. Ï∞ΩÏ°∞Ï£ºÎ°úÏÑúÏùò Ï£ºÎèôÏ†Å Ïó≠Ìï†ÏùÑ Í∞ïÏ°∞Ìï©ÎãàÎã§.';
    }
    if (word.grammar?.includes('Î™ÖÏÇ¨')) {
      return 'ÌïòÎÇòÎãòÏù¥ Ï∞ΩÏ°∞ÌïòÏã† Íµ¨Ï≤¥Ï†Å ÎåÄÏÉÅ. Î™®Îì† ÌîºÏ°∞Î¨ºÏóêÎäî ÌïòÎÇòÎãòÏùò Î™©Ï†ÅÍ≥º ÎúªÏù¥ Îã¥Í≤® ÏûàÏäµÎãàÎã§.';
    }
    
    // Í∏∞Î≥∏ Î©îÏãúÏßÄ
    return 'Ïù¥ Îã®Ïñ¥Îäî ÌïòÎÇòÎãòÏùò Ï∞ΩÏ°∞ ÏÇ¨Ïó≠Í≥º Í∑∏ Î∂ÑÏùò ÏÑ±ÌíàÏùÑ ÎìúÎü¨ÎÇ¥Îäî Ï§ëÏöîÌïú Ïö©Ïñ¥ÏûÖÎãàÎã§.';
  };

  // Î°úÎî© ÏÉÅÌÉú
  if (wordsLoading) {
    return (
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        className={`rounded-3xl shadow-xl p-12 text-center ${
          darkMode
            ? 'bg-gradient-to-br from-slate-900/60 to-indigo-900/40 border border-cyan-400/20'
            : 'bg-white/90 border border-amber-200'
        }`}
      >
        <div className="flex flex-col items-center gap-4">
          <div className={`animate-spin rounded-full h-12 w-12 border-4 border-t-transparent ${
            darkMode ? 'border-cyan-400' : 'border-purple-600'
          }`}></div>
          <p className={darkMode ? 'text-gray-300' : 'text-gray-600'}>
            Îã®Ïñ¥Î•º Î∂àÎü¨Ïò§Îäî Ï§ë...
          </p>
        </div>
      </motion.div>
    );
  }

  // ÏóêÎü¨ ÏÉÅÌÉú
  if (wordsError) {
    return (
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        className={`rounded-3xl shadow-xl p-8 text-center ${
          darkMode
            ? 'bg-gradient-to-br from-red-900/40 to-orange-900/40 border border-red-400/20'
            : 'bg-red-50 border border-red-200'
        }`}
      >
        <div className="flex flex-col items-center gap-4">
          <span className="text-4xl">‚ö†Ô∏è</span>
          <h3 className={`text-lg font-bold ${darkMode ? 'text-red-300' : 'text-red-800'}`}>
            Îã®Ïñ¥Î•º Î∂àÎü¨Ïò§ÏßÄ Î™ªÌñàÏäµÎãàÎã§
          </h3>
          <p className={`text-sm ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>
            {wordsError.message}
          </p>
          <button
            onClick={() => window.location.reload()}
            className={`px-6 py-2 rounded-full transition-all ${
              darkMode
                ? 'bg-cyan-500 hover:bg-cyan-600 text-white'
                : 'bg-purple-600 hover:bg-purple-700 text-white'
            }`}
          >
            Îã§Ïãú ÏãúÎèÑ
          </button>
        </div>
      </motion.div>
    );
  }

  return (
    <div className={`${darkMode ? 'text-white' : 'text-gray-900'}`}>
      {/* Î∑∞ Î™®ÎìúÍ∞Ä ÎåÄÏãúÎ≥¥ÎìúÏù∏ Í≤ΩÏö∞ */}
      {viewMode === 'dashboard' && (
        <div>
          {/* Î∑∞ Ï†ÑÌôò Î≤ÑÌäº */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="mb-4"
          >
            <div className="flex gap-2">
              <button
                onClick={() => setViewMode('words')}
                className={`flex items-center gap-2 px-4 py-2 rounded-xl font-medium transition-all ${
                  darkMode
                    ? 'bg-gray-700 text-gray-300 hover:bg-gray-600'
                    : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                }`}
              >
                <List className="w-4 h-4" />
                Îã®Ïñ¥Ïû•ÏúºÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞
              </button>
            </div>
          </motion.div>

          {/* ÎåÄÏãúÎ≥¥Îìú */}
          <BookProgressDashboard
            darkMode={darkMode}
            onSelectBook={(bookId) => {
              setSelectedBook(bookId);
              setViewMode('words');
            }}
          />
        </div>
      )}

      {/* Î∑∞ Î™®ÎìúÍ∞Ä Ïñ¥Í∑º ÌïôÏäµÏù∏ Í≤ΩÏö∞ */}
      {viewMode === 'roots' && !selectedRoot && (
        <div>
          {/* Î∑∞ Ï†ÑÌôò Î≤ÑÌäº */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className="mb-4"
          >
            <div className="flex gap-2">
              <button
                onClick={() => setViewMode('words')}
                className={`flex items-center gap-2 px-4 py-2 rounded-xl font-medium transition-all ${
                  darkMode
                    ? 'bg-gray-700 text-gray-300 hover:bg-gray-600'
                    : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                }`}
              >
                <List className="w-4 h-4" />
                Îã®Ïñ¥Ïû•ÏúºÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞
              </button>
            </div>
          </motion.div>

          {/* Ïñ¥Í∑º ÏÑ†ÌÉù Í∑∏Î¶¨Îìú */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.1 }}
            className={`rounded-3xl shadow-xl p-6 mb-4 ${
              darkMode
                ? 'bg-gradient-to-br from-slate-900/60 to-purple-900/40 border border-purple-400/20'
                : 'bg-gradient-to-br from-white/90 via-purple-50/50 to-pink-50/50 border border-purple-200'
            }`}
          >
            <h2 className="text-2xl font-bold mb-4 flex items-center gap-2">
              <Sparkles className="w-6 h-6" />
              ÌûàÎ∏åÎ¶¨Ïñ¥ Ïñ¥Í∑º ÌïôÏäµ
            </h2>
            <p className={`mb-6 ${darkMode ? 'text-gray-300' : 'text-gray-700'}`}>
              ÌïôÏäµÌïòÍ≥† Ïã∂ÏùÄ Ïñ¥Í∑ºÏùÑ ÏÑ†ÌÉùÌïòÏÑ∏Ïöî. Í∞Å Ïñ¥Í∑ºÏóêÏÑú ÌååÏÉùÎêú Îã®Ïñ¥Îì§ÏùÑ ÌîåÎûòÏãúÏπ¥ÎìúÎ°ú ÌïôÏäµÌï† Ïàò ÏûàÏäµÎãàÎã§.
            </p>

            {rootsLoading ? (
              <RootGridSkeleton darkMode={darkMode} />
            ) : (
              <>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  {displayedRoots.map((root, index) => (
                    <RootCard
                      key={root.id}
                      root={root}
                      darkMode={darkMode}
                      onClick={() => handleRootSelect(root)}
                      index={index}
                    />
                  ))}
                </div>

                {/* Îçî Î≥¥Í∏∞ Î≤ÑÌäº */}
                {displayedRootsCount < roots.length && (
                  <motion.div
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    className="mt-6 text-center"
                  >
                    <button
                      onClick={loadMoreRoots}
                      className={`px-8 py-3 rounded-xl font-medium transition-all ${
                        darkMode
                          ? 'bg-purple-600 hover:bg-purple-700 text-white'
                          : 'bg-purple-600 hover:bg-purple-700 text-white'
                      }`}
                    >
                      Îçî Î≥¥Í∏∞ ({roots.length - displayedRootsCount}Í∞ú Îçî ÏûàÏùå)
                    </button>
                  </motion.div>
                )}

                {/* Ï†ÑÏ≤¥ Í∞úÏàò ÌëúÏãú */}
                <div className={`mt-4 text-center text-sm ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>
                  {displayedRootsCount} / {roots.length} Ïñ¥Í∑º ÌëúÏãú Ï§ë
                </div>
              </>
            )}
          </motion.div>
        </div>
      )}

      {/* ÏÑ†ÌÉùÎêú Ïñ¥Í∑ºÏùò ÌîåÎûòÏãúÏπ¥Îìú Îç± */}
      {viewMode === 'roots' && selectedRoot && (
        <RootFlashcardDeck
          root={selectedRoot}
          darkMode={darkMode}
          onClose={() => setSelectedRoot(null)}
        />
      )}

      {/* Î∑∞ Î™®ÎìúÍ∞Ä Îã®Ïñ¥Ïû•Ïù∏ Í≤ΩÏö∞ */}
      {viewMode === 'words' && (
        <>
          {/* Ìó§Îçî */}
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            className={`rounded-3xl shadow-xl p-6 mb-4 ${
              darkMode ? 'bg-gradient-to-br from-slate-900/60 to-indigo-900/40 border border-cyan-400/20' : 'bg-gradient-to-br from-white/90 via-amber-50/50 to-orange-50/50 border border-orange-200'
            }`}
          >
            <div className="flex items-center justify-between mb-4">
              <h2 className="text-2xl font-bold flex items-center gap-2">
                üìö Îã®Ïñ¥Ïû•
              </h2>

              {/* Î≤ÑÌäºÎì§ */}
              <div className="flex gap-2">
                <button
                  onClick={() => setViewMode('dashboard')}
                  className={`flex items-center gap-2 px-4 py-2 rounded-xl font-medium transition-all ${
                    darkMode
                      ? 'bg-purple-600 hover:bg-purple-700 text-white'
                      : 'bg-purple-600 hover:bg-purple-700 text-white'
                  }`}
                >
                  <BarChart3 className="w-4 h-4" />
                  ÏßÑÎèÑ ÎåÄÏãúÎ≥¥Îìú
                </button>

                <button
                  onClick={() => {
                    setViewMode('roots');
                    setSelectedRoot(null);
                  }}
                  className={`flex items-center gap-2 px-4 py-2 rounded-xl font-medium transition-all ${
                    darkMode
                      ? 'bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white'
                      : 'bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white'
                  }`}
                >
                  <Sparkles className="w-4 h-4" />
                  Ïñ¥Í∑º ÌïôÏäµ
                </button>
              </div>
            </div>

        {/* Ï±Ö ÏÑ†ÌÉù */}
        <div className="mb-4">
          <label className={`text-sm font-medium flex items-center gap-2 mb-2 ${
            darkMode ? 'text-gray-300' : 'text-gray-700'
          }`}>
            <BookOpen className="w-4 h-4" />
            ÏÑ±Í≤ΩÏ±Ö ÏÑ†ÌÉù
          </label>
          <select
            value={selectedBook}
            onChange={(e) => setSelectedBook(e.target.value)}
            disabled={booksLoading}
            className={`w-full p-3 rounded-xl font-medium transition-all ${
              darkMode
                ? 'bg-gray-700 text-white border border-gray-600 focus:border-cyan-400'
                : 'bg-white text-gray-900 border border-gray-300 focus:border-purple-500'
            } focus:outline-none focus:ring-2 ${
              darkMode ? 'focus:ring-cyan-400/50' : 'focus:ring-purple-500/50'
            }`}
          >
            {booksLoading ? (
              <option>Î∂àÎü¨Ïò§Îäî Ï§ë...</option>
            ) : books.length === 0 ? (
              <option>Ï±Ö Ï†ïÎ≥¥Î•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§</option>
            ) : (
              books.map(book => (
                <option key={book.id} value={book.id}>
                  {book.name} ({book.english_name})
                </option>
              ))
            )}
          </select>

          {/* Ï±Ö ÏßÑÎèÑ ÌëúÏãú */}
          {bookProgress && !progressLoading && (
            <div className={`mt-2 p-3 rounded-xl ${
              darkMode ? 'bg-purple-900/30' : 'bg-purple-50'
            }`}>
              <div className="flex justify-between items-center mb-2">
                <span className={`text-xs ${darkMode ? 'text-purple-300' : 'text-purple-700'}`}>
                  ÌïôÏäµ ÏßÑÎèÑ
                </span>
                <span className={`text-sm font-bold ${darkMode ? 'text-purple-200' : 'text-purple-900'}`}>
                  {bookProgress.progress_percentage?.toFixed(1) || 0}%
                </span>
              </div>
              <div className={`w-full h-2 rounded-full ${darkMode ? 'bg-gray-700' : 'bg-gray-200'}`}>
                <motion.div
                  className="h-full bg-gradient-to-r from-purple-500 to-pink-500 rounded-full"
                  initial={{ width: 0 }}
                  animate={{ width: `${bookProgress.progress_percentage || 0}%` }}
                  transition={{ duration: 0.5 }}
                />
              </div>
              <div className="flex justify-between mt-2 text-xs">
                <span className={darkMode ? 'text-gray-400' : 'text-gray-600'}>
                  ÌïôÏäµ: {bookProgress.learned_words || 0}Í∞ú
                </span>
                <span className={darkMode ? 'text-gray-400' : 'text-gray-600'}>
                  ÏôÑÎ≤Ω ÏïîÍ∏∞: {bookProgress.mastered_words || 0}Í∞ú
                </span>
              </div>
            </div>
          )}
        </div>

        {/* ÌÜµÍ≥Ñ */}
        <div className="grid grid-cols-2 md:grid-cols-4 gap-3 mb-4">
          <div className={`p-3 rounded-xl ${darkMode ? 'bg-purple-900/30' : 'bg-purple-50'}`}>
            <div className={`text-xs ${darkMode ? 'text-purple-300' : 'text-purple-700'}`}>Ï†ÑÏ≤¥ Îã®Ïñ¥</div>
            <div className="text-2xl font-bold">{stats.total}Í∞ú</div>
          </div>
          <div className={`p-3 rounded-xl ${darkMode ? 'bg-blue-900/30' : 'bg-blue-50'}`}>
            <div className={`text-xs ${darkMode ? 'text-blue-300' : 'text-blue-700'}`}>Î∂ÅÎßàÌÅ¨</div>
            <div className="text-2xl font-bold">{stats.bookmarked}Í∞ú</div>
          </div>
          <div className={`p-3 rounded-xl ${darkMode ? 'bg-green-900/30' : 'bg-green-50'}`}>
            <div className={`text-xs ${darkMode ? 'text-green-300' : 'text-green-700'}`}>ÏôÑÎ≤Ω ÏïîÍ∏∞</div>
            <div className="text-2xl font-bold">{stats.mastered}Í∞ú</div>
          </div>
          <div className={`p-3 rounded-xl ${darkMode ? 'bg-orange-900/30' : 'bg-orange-50'}`}>
            <div className={`text-xs ${darkMode ? 'text-orange-300' : 'text-orange-700'}`}>Ïò§Îäò Î≥µÏäµ</div>
            <div className="text-2xl font-bold">{stats.dueToday}Í∞ú</div>
          </div>
        </div>

        {/* ÏÑúÎ∏å ÌÉ≠ */}
        <div className="grid grid-cols-3 gap-2 mb-2">
          <button
            onClick={() => setActiveSubTab('all')}
            className={`py-2 px-3 rounded-lg font-medium transition-all text-sm ${
              activeSubTab === 'all'
                ? darkMode
                  ? 'bg-purple-600 text-white'
                  : 'bg-purple-600 text-white'
                : darkMode
                  ? 'bg-gray-700 text-gray-300'
                  : 'bg-gray-200 text-gray-700'
            }`}
          >
            üìö Ï†ÑÏ≤¥
          </button>
          <button
            onClick={() => setActiveSubTab('bookmarked')}
            className={`py-2 px-3 rounded-lg font-medium transition-all text-sm ${
              activeSubTab === 'bookmarked'
                ? darkMode
                  ? 'bg-purple-600 text-white'
                  : 'bg-purple-600 text-white'
                : darkMode
                  ? 'bg-gray-700 text-gray-300'
                  : 'bg-gray-200 text-gray-700'
            }`}
          >
            ‚≠ê Î∂ÅÎßàÌÅ¨
          </button>
          <button
            onClick={() => setActiveSubTab('study')}
            className={`py-2 px-3 rounded-lg font-medium transition-all text-sm ${
              activeSubTab === 'study'
                ? darkMode
                  ? 'bg-purple-600 text-white'
                  : 'bg-purple-600 text-white'
                : darkMode
                  ? 'bg-gray-700 text-gray-300'
                  : 'bg-gray-200 text-gray-700'
            }`}
          >
            üéØ ÏïîÍ∏∞ÌïòÍ∏∞
          </button>
        </div>

        {/* ÌïÑÌÑ∞ ÌÉ≠ (ÏÉà Îã®Ïñ¥, Î≥µÏäµ, Ïñ¥Î†§Ïö¥ Îã®Ïñ¥) */}
        <div className="grid grid-cols-3 gap-2 mb-4">
          <button
            onClick={() => setActiveSubTab('new')}
            className={`py-2 px-3 rounded-lg font-medium transition-all text-sm ${
              activeSubTab === 'new'
                ? darkMode
                  ? 'bg-green-600 text-white'
                  : 'bg-green-600 text-white'
                : darkMode
                  ? 'bg-gray-700 text-gray-300'
                  : 'bg-gray-200 text-gray-700'
            }`}
          >
            ‚ú® ÏÉà Îã®Ïñ¥
          </button>
          <button
            onClick={() => setActiveSubTab('review')}
            className={`py-2 px-3 rounded-lg font-medium transition-all text-sm ${
              activeSubTab === 'review'
                ? darkMode
                  ? 'bg-orange-600 text-white'
                  : 'bg-orange-600 text-white'
                : darkMode
                  ? 'bg-gray-700 text-gray-300'
                  : 'bg-gray-200 text-gray-700'
            }`}
          >
            üìù Î≥µÏäµ ÎåÄÍ∏∞
          </button>
          <button
            onClick={() => setActiveSubTab('difficult')}
            className={`py-2 px-3 rounded-lg font-medium transition-all text-sm ${
              activeSubTab === 'difficult'
                ? darkMode
                  ? 'bg-red-600 text-white'
                  : 'bg-red-600 text-white'
                : darkMode
                  ? 'bg-gray-700 text-gray-300'
                  : 'bg-gray-200 text-gray-700'
            }`}
          >
            üî• Ïñ¥Î†§Ïö¥ Îã®Ïñ¥
          </button>
        </div>

        {/* Í≤ÄÏÉâ */}
        <div className="relative">
          <Search className={`absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 ${darkMode ? 'text-gray-400' : 'text-gray-500'}`} />
          <input
            type="text"
            placeholder="Îã®Ïñ¥ Í≤ÄÏÉâ..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className={`w-full pl-10 pr-4 py-2 rounded-lg ${
              darkMode
                ? 'bg-gray-700 text-white placeholder-gray-400'
                : 'bg-gray-100 text-gray-900 placeholder-gray-500'
            }`}
          />
        </div>
      </motion.div>

      {/* Ïª®ÌÖêÏ∏† */}
      <AnimatePresence mode="wait">
        {activeSubTab === 'study' && !studyMode ? (
          // ÏïîÍ∏∞ÌïòÍ∏∞ ÎåÄÏãúÎ≥¥Îìú
          <motion.div
            key="study-dashboard"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            className={`rounded-3xl shadow-xl p-6 ${darkMode ? 'bg-gradient-to-br from-slate-900/60 to-violet-900/40 border border-violet-400/20' : 'bg-gradient-to-br from-white/90 via-orange-50/50 to-yellow-50/50 border border-yellow-200'}`}
          >
            <h3 className="text-xl font-bold mb-4 flex items-center gap-2">
              <TrendingUp className="w-6 h-6" />
              Ïò§ÎäòÏùò Î≥µÏäµ
            </h3>

            <div className={`mb-6 p-4 rounded-xl ${darkMode ? 'bg-purple-900/30' : 'bg-purple-50'}`}>
              <div className="flex justify-between items-center mb-2">
                <span className={darkMode ? 'text-purple-300' : 'text-purple-700'}>ÏßÑÌñâÎèÑ</span>
                <span className="font-bold">
                  {stats.total - stats.dueToday}/{stats.total}
                </span>
              </div>
              <div className={`w-full h-2 rounded-full ${darkMode ? 'bg-gray-700' : 'bg-gray-200'}`}>
                <motion.div
                  className="h-full bg-gradient-to-r from-purple-500 to-pink-500 rounded-full"
                  initial={{ width: 0 }}
                  animate={{ width: `${((stats.total - stats.dueToday) / stats.total) * 100}%` }}
                  transition={{ duration: 0.5 }}
                />
              </div>
            </div>

            <div className="space-y-3">
              <div className={`p-4 rounded-xl ${darkMode ? 'bg-blue-900/30' : 'bg-blue-50'}`}>
                <div className={`text-sm mb-1 ${darkMode ? 'text-blue-300' : 'text-blue-700'}`}>
                  ‚úÖ ÏôÑÎ£åÌïú Îã®Ïñ¥
                </div>
                <div className="text-2xl font-bold">{stats.total - stats.dueToday}Í∞ú</div>
              </div>

              <div className={`p-4 rounded-xl ${darkMode ? 'bg-orange-900/30' : 'bg-orange-50'}`}>
                <div className={`text-sm mb-1 ${darkMode ? 'text-orange-300' : 'text-orange-700'}`}>
                  üìù ÎÇ®ÏùÄ Îã®Ïñ¥
                </div>
                <div className="text-2xl font-bold">{stats.dueToday}Í∞ú</div>
              </div>

              <div className={`p-4 rounded-xl ${darkMode ? 'bg-green-900/30' : 'bg-green-50'}`}>
                <div className={`text-sm mb-1 ${darkMode ? 'text-green-300' : 'text-green-700'}`}>
                  üèÜ ÏôÑÎ≤ΩÌûà ÏïîÍ∏∞
                </div>
                <div className="text-2xl font-bold">{stats.mastered}Í∞ú</div>
              </div>
            </div>

            {filteredWords.length > 0 && (
              <motion.button
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
                onClick={() => {
                  setStudyMode(true);
                  setCurrentStudyIndex(0);
                  setFlippedCard(null);
                }}
                className="w-full mt-6 py-4 bg-gradient-to-r from-purple-600 to-pink-600 text-white rounded-2xl font-bold text-lg shadow-lg"
              >
                üéØ ÏßÄÍ∏à Î≥µÏäµ ÏãúÏûëÌïòÍ∏∞ ({filteredWords.length}Í∞ú)
              </motion.button>
            )}
          </motion.div>
        ) : activeSubTab === 'study' && studyMode ? (
          // ÌîåÎûòÏãúÏπ¥Îìú Î≥µÏäµ Î™®Îìú
          <motion.div
            key="study-mode"
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0.9 }}
            className={`rounded-3xl shadow-xl p-6 ${darkMode ? 'bg-gradient-to-br from-slate-900/60 to-violet-900/40 border border-violet-400/20' : 'bg-gradient-to-br from-white/90 via-orange-50/50 to-yellow-50/50 border border-yellow-200'}`}
          >
            <div className="mb-4 flex justify-between items-center">
              <span className="text-sm">
                {currentStudyIndex + 1} / {filteredWords.length}
              </span>
              <button
                onClick={() => {
                  setStudyMode(false);
                  setCurrentStudyIndex(0);
                }}
                className={`px-3 py-1 rounded-lg ${darkMode ? 'bg-gray-700' : 'bg-gray-200'}`}
              >
                Ï¢ÖÎ£å
              </button>
            </div>

            {filteredWords[currentStudyIndex] && (() => {
              const currentWord = filteredWords[currentStudyIndex];
              const colors = getWordColor(currentWord);
              const emoji = getWordEmoji(currentWord);

              return (
                <div
                  className="relative cursor-pointer"
                  onClick={() => setFlippedCard(flippedCard ? null : currentWord.hebrew)}
                  style={{ perspective: '1000px', minHeight: '400px' }}
                >
                  <motion.div
                    className="relative rounded-2xl"
                    style={{
                      transformStyle: 'preserve-3d',
                      transition: 'transform 0.6s',
                      transform: flippedCard === currentWord.hebrew ? 'rotateY(180deg)' : 'rotateY(0deg)',
                    }}
                  >
                    {/* ÏïûÎ©¥ - ÌûàÎ∏åÎ¶¨Ïñ¥Îßå (StudyTab Ïä§ÌÉÄÏùº) */}
                    <div
                      className={`absolute inset-0 p-6 rounded-2xl backdrop-blur-xl border ${colors.bg} ${colors.border}`}
                      style={{
                        backfaceVisibility: 'hidden',
                        WebkitBackfaceVisibility: 'hidden',
                        backdropFilter: 'blur(20px)',
                        WebkitBackdropFilter: 'blur(20px)',
                      }}
                    >
                      <div className="text-center py-8">
                        <div className="mb-6 flex justify-center">
                          <HebrewIcon
                            word={currentWord.hebrew}
                            iconSvg={currentWord.iconSvg}
                            size={96}
                            color={darkMode ? '#ffffff' : '#1f2937'}
                            fallback={emoji}
                            className="drop-shadow-lg"
                          />
                        </div>
                        <div
                          className={`text-5xl font-bold mb-4 ${
                            darkMode ? 'text-white drop-shadow-lg' : 'text-gray-900'
                          }`}
                          dir="rtl"
                          style={{ fontFamily: 'David, serif' }}
                        >
                          {currentWord.hebrew}
                        </div>
                        <div
                          className={`text-sm px-4 py-2 rounded-full backdrop-blur-md inline-block ${
                            darkMode
                              ? 'bg-purple-900/30 text-purple-200 border border-purple-500/30'
                              : 'bg-purple-100/70 text-purple-700 border border-purple-300/50'
                          }`}
                        >
                          ÌÉ≠ÌïòÏó¨ Îí∑Î©¥ Î≥¥Í∏∞
                        </div>
                      </div>
                    </div>

                    {/* Îí∑Î©¥ - ÏÉÅÏÑ∏ Ï†ïÎ≥¥ (StudyTab Ïä§ÌÉÄÏùº) */}
                    <div
                      className={`absolute inset-0 p-4 rounded-2xl backdrop-blur-xl border ${colors.bg} ${colors.border}`}
                      style={{
                        backfaceVisibility: 'hidden',
                        WebkitBackfaceVisibility: 'hidden',
                        transform: 'rotateY(180deg)',
                        backdropFilter: 'blur(20px)',
                        WebkitBackdropFilter: 'blur(20px)',
                      }}
                    >
                      <div className="space-y-2 text-center">
                        {/* ÏùòÎØ∏ */}
                        <div className="pb-2 border-b border-current/20">
                          <div style={{ fontSize: 'clamp(1.5rem, 5vw, 2rem)' }} className="mb-1">{emoji}</div>
                          <div
                            className={`font-bold ${darkMode ? 'text-white' : 'text-gray-900'}`}
                            style={{ fontSize: 'clamp(1rem, 4vw, 1.5rem)' }}
                          >
                            {currentWord.meaning}
                          </div>
                        </div>

                        {/* Î∞úÏùå */}
                        <div
                          className={`p-2 rounded-xl backdrop-blur-md border ${
                            darkMode
                              ? 'bg-gradient-to-r from-indigo-900/30 via-purple-900/30 to-pink-900/30 border-indigo-500/30'
                              : 'bg-gradient-to-r from-indigo-50/70 via-purple-50/70 to-pink-50/70 border-indigo-200/50'
                          }`}
                          style={{
                            backdropFilter: 'blur(10px)',
                            WebkitBackdropFilter: 'blur(10px)',
                          }}
                        >
                          <div className={`text-[0.65rem] font-semibold mb-1 ${darkMode ? 'text-purple-300' : 'text-purple-700'}`}>
                            üì¢ Î∞úÏùå
                          </div>
                          <div className="flex items-center justify-center gap-2">
                            {/* IPA Î∞úÏùå */}
                            {currentWord.ipa && (
                              <div className={`px-2 py-1 rounded-lg backdrop-blur-sm ${
                                darkMode
                                  ? 'bg-blue-900/30 border border-blue-500/30'
                                  : 'bg-blue-50/80 border border-blue-200/50'
                              }`}>
                                <div className={`text-[0.6rem] mb-0.5 ${darkMode ? 'text-blue-300' : 'text-blue-600'}`}>
                                  IPA
                                </div>
                                <div className={`font-mono text-xs font-medium ${darkMode ? 'text-blue-100' : 'text-blue-900'}`}>
                                  {currentWord.ipa}
                                </div>
                              </div>
                            )}

                            {/* ÌïúÍµ≠Ïñ¥ Î∞úÏùå */}
                            <div className={`px-2 py-1 rounded-lg backdrop-blur-sm ${
                              darkMode
                                ? 'bg-pink-900/30 border border-pink-500/30'
                                : 'bg-pink-50/80 border border-pink-200/50'
                            }`}>
                              <div className={`text-[0.6rem] mb-0.5 ${darkMode ? 'text-pink-300' : 'text-pink-600'}`}>
                                ÌïúÍ∏Ä
                              </div>
                              <div className={`text-xs font-medium ${darkMode ? 'text-pink-100' : 'text-pink-900'}`}>
                                {currentWord.korean}
                              </div>
                            </div>

                            {/* Î∞úÏùå Îì£Í∏∞ Î≤ÑÌäº */}
                            <button
                              onClick={(e) => {
                                e.stopPropagation();
                                speak(currentWord.hebrew);
                              }}
                              className={`p-1.5 rounded-full backdrop-blur-md ${
                                darkMode
                                  ? 'bg-purple-900/40 hover:bg-purple-800/50 border border-purple-500/30'
                                  : 'bg-purple-100/80 hover:bg-purple-200/80 border border-purple-300/50'
                              } transition-all`}
                            >
                              <Volume2 size={14} className={darkMode ? 'text-purple-300' : 'text-purple-700'} />
                            </button>
                          </div>
                        </div>

                        {/* Í∞ÑÎã®Ìïú ÌíàÏÇ¨ */}
                        {currentWord.grammar && (
                          <div className="text-center mb-2">
                            <div className={`inline-block px-3 py-1.5 rounded-lg font-bold ${darkMode ? 'bg-black/30 text-gray-200' : 'bg-white/50 text-gray-800'}`}>
                              {getSimpleGrammar(currentWord.grammar)} {getGrammarEmoji(currentWord.grammar)}
                            </div>
                          </div>
                        )}

                        {/* ÏïåÌååÎ≤≥ Î∂ÑÌï¥ (letters) */}
                        {currentWord.letters && (
                          <div className={`p-3 rounded-lg mb-2 text-center ${
                            darkMode ? 'bg-gradient-to-r from-emerald-900/30 to-teal-900/30 border border-emerald-500/30' : 'bg-gradient-to-r from-emerald-50/90 to-teal-50/90 border border-emerald-300/50'
                          }`}>
                            <div className={`text-xs font-semibold mb-1.5 ${darkMode ? 'text-emerald-300' : 'text-emerald-700'}`}>
                              üî§ ÏïåÌååÎ≤≥ÏúºÎ°ú ÏùΩÍ∏∞
                            </div>
                            <div className={`text-sm font-medium leading-snug ${darkMode ? 'text-emerald-100' : 'text-emerald-900'}`} dir="rtl">
                              {currentWord.letters}
                            </div>
                          </div>
                        )}

                        {/* Ïã†ÌïôÏ†Å ÏùòÎØ∏ */}
                        <div className={`p-3 rounded-lg mb-2 ${darkMode ? 'bg-gradient-to-r from-indigo-900/30 to-purple-900/30 border border-indigo-500/30' : 'bg-gradient-to-r from-indigo-50/90 to-purple-50/90 border border-indigo-300/50'}`}>
                          <div className={`text-xs font-semibold mb-1 ${darkMode ? 'text-indigo-300' : 'text-indigo-700'}`}>
                            ‚ú® ÏÑ±Í≤ΩÏ†Å ÏùòÎØ∏
                          </div>
                          <div className={`text-sm font-medium ${darkMode ? 'text-indigo-100' : 'text-indigo-900'}`}>
                            {getTheologicalMeaning(currentWord)}
                          </div>
                        </div>

                        {/* ÎπÑÏä∑Ìïú Îã®Ïñ¥ (ÏûàÏùÑ Í≤ΩÏö∞) */}
                        {currentWord.relatedWords && currentWord.relatedWords.length > 0 && (
                          <div className={`p-3 rounded-lg mb-2 ${darkMode ? 'bg-gradient-to-r from-blue-900/30 to-cyan-900/30 border border-blue-500/30' : 'bg-gradient-to-r from-blue-50/90 to-cyan-50/90 border border-blue-300/50'}`}>
                            <div className={`text-xs font-semibold mb-1 ${darkMode ? 'text-blue-300' : 'text-blue-700'}`}>
                              üîó ÎπÑÏä∑Ìïú Îã®Ïñ¥
                            </div>
                            <div className={`text-sm font-medium ${darkMode ? 'text-blue-100' : 'text-blue-900'}`}>
                              {currentWord.relatedWords.join(', ')}
                            </div>
                          </div>
                        )}

                        {/* Íµ¨Ï†à Ï∞∏Ï°∞ */}
                        <div className={`text-xs ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>
                          Ï∂úÏ≤ò: {currentWord.verseReference}
                        </div>
                      </div>

                      {/* SRS Î≤ÑÌäº (Îí∑Î©¥Ïùº ÎïåÎßå) */}
                      {flippedCard === currentWord.hebrew && (
                        <div className="mt-4 space-y-2" onClick={(e) => e.stopPropagation()}>
                          <button
                            onClick={() => updateSRS(currentWord.hebrew, 2)}
                            className="w-full py-3 bg-green-600 hover:bg-green-700 text-white rounded-xl font-medium transition-colors"
                          >
                            üòä ÏïåÍ≥†ÏûàÏñ¥Ïöî
                          </button>
                          <button
                            onClick={() => updateSRS(currentWord.hebrew, 1)}
                            className="w-full py-3 bg-yellow-600 hover:bg-yellow-700 text-white rounded-xl font-medium transition-colors"
                          >
                            ü§î Ïï†Îß§Ìï¥Ïöî
                          </button>
                          <button
                            onClick={() => updateSRS(currentWord.hebrew, 0)}
                            className="w-full py-3 bg-red-600 hover:bg-red-700 text-white rounded-xl font-medium transition-colors"
                          >
                            üòì Î™®Î•¥Í≤†Ïñ¥Ïöî
                          </button>
                        </div>
                      )}
                    </div>
                  </motion.div>
                </div>
              );
            })()}
          </motion.div>
        ) : (
          // Í∑∏Î¶¨Îìú/Î¶¨Ïä§Ìä∏ Î∑∞
          <motion.div
            key="word-list"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
          >
            {filteredWords.length === 0 ? (
              <div className={`rounded-3xl shadow-xl p-12 text-center ${darkMode ? 'bg-gradient-to-br from-slate-900/60 to-indigo-900/40 border border-cyan-400/20' : 'bg-white/90 border border-amber-200'}`}>
                <p className={darkMode ? 'text-gray-400' : 'text-gray-600'}>
                  {searchQuery ? 'Í≤ÄÏÉâ Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§' : activeSubTab === 'bookmarked' ? 'Î∂ÅÎßàÌÅ¨Ìïú Îã®Ïñ¥Í∞Ä ÏóÜÏäµÎãàÎã§' : 'Îã®Ïñ¥Í∞Ä ÏóÜÏäµÎãàÎã§'}
                </p>
              </div>
            ) : (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {filteredWords.map((word, index) => (
                  <FlashCard
                    key={word.hebrew}
                    word={word}
                    darkMode={darkMode}
                    isFlipped={flippedCards.has(word.hebrew)}
                    onFlip={() => toggleFlip(word.hebrew)}
                    isBookmarked={bookmarkedWords.has(word.hebrew)}
                    onBookmark={() => toggleBookmark(word.hebrew)}
                    reference={word.verseReference}
                    index={index}
                  />
                ))}
              </div>
            )}
          </motion.div>
        )}
      </AnimatePresence>
        </>
      )}
    </div>
  );
}
